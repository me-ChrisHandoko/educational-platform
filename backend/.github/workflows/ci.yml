name: CI/CD Pipeline\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main, develop ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    \n    services:\n      postgres:\n        image: postgres:14\n        env:\n          POSTGRES_PASSWORD: postgres\n          POSTGRES_USER: postgres\n          POSTGRES_DB: test_db\n        options: >\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 5432:5432\n    \n    strategy:\n      matrix:\n        node-version: [18.x, 20.x]\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Setup Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v4\n      with:\n        node-version: ${{ matrix.node-version }}\n        cache: 'npm'\n        cache-dependency-path: backend/package-lock.json\n    \n    - name: Install dependencies\n      run: |\n        cd backend\n        npm ci\n    \n    - name: Setup environment variables\n      run: |\n        cd backend\n        cp .env.example .env\n        echo \"DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db\" >> .env\n        echo \"TEST_DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db\" >> .env\n        echo \"JWT_ACCESS_SECRET=test-access-secret-key-for-ci\" >> .env\n        echo \"JWT_REFRESH_SECRET=test-refresh-secret-key-for-ci\" >> .env\n        echo \"JWT_ACCESS_EXPIRES_IN=15m\" >> .env\n        echo \"JWT_REFRESH_EXPIRES_IN=7d\" >> .env\n        echo \"NODE_ENV=test\" >> .env\n    \n    - name: Generate Prisma client\n      run: |\n        cd backend\n        npx prisma generate\n    \n    - name: Run database migrations\n      run: |\n        cd backend\n        npx prisma db push --force-reset\n    \n    - name: Lint code\n      run: |\n        cd backend\n        npm run lint\n    \n    - name: Check code formatting\n      run: |\n        cd backend\n        npm run format\n        git diff --exit-code\n    \n    - name: Run unit tests\n      run: |\n        cd backend\n        npm run test -- --coverage --coverageReporters=lcov\n    \n    - name: Run integration tests\n      run: |\n        cd backend\n        npm run test:e2e\n    \n    - name: Upload coverage to Codecov\n      if: matrix.node-version == '20.x'\n      uses: codecov/codecov-action@v3\n      with:\n        file: ./backend/coverage/lcov.info\n        directory: ./backend/coverage/\n        flags: backend\n        name: backend-coverage\n        fail_ci_if_error: false\n    \n    - name: Build application\n      run: |\n        cd backend\n        npm run build\n    \n    - name: Test built application\n      run: |\n        cd backend\n        node dist/main.js &\n        SERVER_PID=$!\n        sleep 5\n        curl -f http://localhost:3000/auth/health || exit 1\n        kill $SERVER_PID\n  \n  security:\n    runs-on: ubuntu-latest\n    if: github.event_name == 'push' || github.event_name == 'pull_request'\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Setup Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: '20.x'\n        cache: 'npm'\n        cache-dependency-path: backend/package-lock.json\n    \n    - name: Install dependencies\n      run: |\n        cd backend\n        npm ci\n    \n    - name: Run security audit\n      run: |\n        cd backend\n        npm audit --audit-level=moderate\n    \n    - name: Check for vulnerable dependencies\n      run: |\n        cd backend\n        npx audit-ci --moderate\n  \n  quality-gates:\n    runs-on: ubuntu-latest\n    needs: test\n    if: always()\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Setup Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: '20.x'\n        cache: 'npm'\n        cache-dependency-path: backend/package-lock.json\n    \n    - name: Install dependencies\n      run: |\n        cd backend\n        npm ci\n    \n    - name: Setup test database\n      run: |\n        docker run --name postgres-quality-check -e POSTGRES_PASSWORD=postgres -e POSTGRES_USER=postgres -e POSTGRES_DB=test_db -p 5433:5432 -d postgres:14\n        sleep 10\n    \n    - name: Setup environment\n      run: |\n        cd backend\n        echo \"DATABASE_URL=postgresql://postgres:postgres@localhost:5433/test_db\" > .env\n        echo \"TEST_DATABASE_URL=postgresql://postgres:postgres@localhost:5433/test_db\" >> .env\n        echo \"JWT_ACCESS_SECRET=test-access-secret-key-for-ci\" >> .env\n        echo \"JWT_REFRESH_SECRET=test-refresh-secret-key-for-ci\" >> .env\n        echo \"NODE_ENV=test\" >> .env\n    \n    - name: Generate Prisma client and setup DB\n      run: |\n        cd backend\n        npx prisma generate\n        npx prisma db push --force-reset\n    \n    - name: Run tests with coverage\n      run: |\n        cd backend\n        npm run test:cov\n    \n    - name: Check coverage thresholds\n      run: |\n        cd backend\n        # Check if coverage meets minimum thresholds\n        node -e \"\n          const fs = require('fs');\n          const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));\n          const total = coverage.total;\n          \n          const thresholds = {\n            statements: 80,\n            branches: 80,\n            functions: 80,\n            lines: 80\n          };\n          \n          let failed = false;\n          Object.keys(thresholds).forEach(key => {\n            if (total[key].pct < thresholds[key]) {\n              console.error('Coverage threshold not met for', key, ':', total[key].pct, '% < ', thresholds[key], '%');\n              failed = true;\n            } else {\n              console.log('Coverage threshold met for', key, ':', total[key].pct, '%');\n            }\n          });\n          \n          if (failed) {\n            process.exit(1);\n          }\n        \"\n    \n    - name: Stop test database\n      if: always()\n      run: |\n        docker stop postgres-quality-check || true\n        docker rm postgres-quality-check || true\n  \n  deploy-staging:\n    runs-on: ubuntu-latest\n    needs: [test, security, quality-gates]\n    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Deploy to staging\n      run: |\n        echo \"Deploying to staging environment...\"\n        # Add your staging deployment steps here\n        # Example: deploy to staging server, update staging database, etc.\n  \n  deploy-production:\n    runs-on: ubuntu-latest\n    needs: [test, security, quality-gates]\n    if: github.ref == 'refs/heads/main' && github.event_name == 'push'\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Deploy to production\n      run: |\n        echo \"Deploying to production environment...\"\n        # Add your production deployment steps here\n        # Example: deploy to production server, run database migrations, etc.\n  \n  notify:\n    runs-on: ubuntu-latest\n    needs: [test, security, quality-gates]\n    if: always()\n    \n    steps:\n    - name: Notify on success\n      if: needs.test.result == 'success' && needs.security.result == 'success' && needs.quality-gates.result == 'success'\n      run: |\n        echo \"✅ All checks passed successfully!\"\n        # Add notification logic here (Slack, email, etc.)\n    \n    - name: Notify on failure\n      if: needs.test.result == 'failure' || needs.security.result == 'failure' || needs.quality-gates.result == 'failure'\n      run: |\n        echo \"❌ Some checks failed!\"\n        echo \"Test result: ${{ needs.test.result }}\"\n        echo \"Security result: ${{ needs.security.result }}\"\n        echo \"Quality gates result: ${{ needs.quality-gates.result }}\"\n        # Add failure notification logic here"