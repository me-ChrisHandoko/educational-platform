// Educational Management Platform - Prisma Schema (ENHANCED WITH PARENT PORTAL & MULTI-LANGUAGE)
// High-performance multi-tenant architecture with parent engagement features

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "tenant"]
}

// ==================== PLATFORM LEVEL (public schema) ====================

model Platform {
  id              String         @id @default(uuid()) @db.Uuid
  name            String
  domain          String         @unique
  status          PlatformStatus @default(ACTIVE)
  settings        Json           @default("{}")
  maintenanceMode Boolean        @default(false)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  tenants   Tenant[]
  languages PlatformLanguage[]
  features  PlatformFeature[]

  @@map("platforms")
  @@schema("public")
}

model Tenant {
  id          String       @id @default(uuid()) @db.Uuid
  platformId  String       @db.Uuid
  name        String
  code        String       @unique @db.VarChar(50)
  status      TenantStatus @default(ACTIVE)
  settings    Json         @default("{}")
  billingInfo Json

  // Subscription details
  currentStudents  Int     @default(0) // Real-time student count
  billingEmail     String? // Billing contact
  billingAddress   Json? // Billing address
  subscriptionTier String  @default("essential") // Current pricing tier

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  platform      Platform       @relation(fields: [platformId], references: [id])
  schools       School[]
  tenantUsers   TenantUser[]
  subscriptions Subscription[]
  usage         TenantUsage[] // Usage tracking

  @@index([platformId])
  @@index([status])
  @@index([currentStudents]) // For pricing tier calculation
  @@map("tenants")
  @@schema("public")
}

model School {
  id           String  @id @default(uuid()) @db.Uuid
  tenantId     String  @db.Uuid
  schemaName   String  @unique @db.VarChar(100) // For schema isolation
  name         String
  code         String  @unique @db.VarChar(50)
  npsn         String? @unique @db.VarChar(20) // National School ID
  subdomain    String  @unique
  customDomain String? @unique

  // === WHITE LABEL CONFIGURATION ===
  whiteLabelConfig Json @default("{}") // Konfigurasi white label
  /**
   * Struktur whiteLabelConfig:
   * {
   * "enabled": true,
   * "branding": {
   * "logo": "https://cdn.school.com/logo.png",
   * "favicon": "https://cdn.school.com/favicon.ico",
   * "primaryColor": "#1e40af",
   * "secondaryColor": "#64748b",
   * "fontFamily": "Inter",
   * "customCSS": "body { ... }"
   * },
   * "domain": {
   * "customDomain": "www.sekolahku.sch.id",
   * "sslEnabled": true,
   * "sslProvider": "letsencrypt",
   * "sslExpiry": "2025-12-31"
   * },
   * "features": {
   * "hidePlatformBranding": true,
   * "customLoginPage": true,
   * "customEmailTemplates": true,
   * "mobileAppBranding": true
   * },
   * "seo": {
   * "title": "Sekolah Kusuma Bangsa",
   * "description": "Portal akademik terdepan",
   * "keywords": ["sekolah", "akademik", "pendidikan"]
   * }
   * }
   */

  status        SchoolStatus  @default(ACTIVE)
  type          SchoolType
  levels        SchoolLevel[]
  settings      Json          @default("{}")
  address       Json
  contactInfo   Json
  accreditation String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  tenant          Tenant           @relation(fields: [tenantId], references: [id])
  schoolLanguages SchoolLanguage[]

  @@index([tenantId])
  @@index([status])
  @@index([type])
  @@index([customDomain]) // Index untuk performa routing domain
  @@map("schools")
  @@schema("public")
}

// Language Management
model PlatformLanguage {
  id           String         @id @default(uuid()) @db.Uuid
  platformId   String         @db.Uuid
  code         String         @db.VarChar(10) // ISO 639-1
  name         String
  nativeName   String
  rtl          Boolean        @default(false)
  tier         Int            @default(1) // Pricing tier
  basePrice    Decimal        @db.Decimal(12, 2)
  status       LanguageStatus @default(ACTIVE)
  translations Json           @default("{}") // UI translations
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  platform        Platform         @relation(fields: [platformId], references: [id])
  schoolLanguages SchoolLanguage[]

  @@unique([platformId, code])
  @@index([status])
  @@map("platform_languages")
  @@schema("public")
}

model SchoolLanguage {
  id            String     @id @default(uuid()) @db.Uuid
  schoolId      String     @db.Uuid
  languageId    String     @db.Uuid
  isPrimary     Boolean    @default(false)
  isFree        Boolean    @default(false) // First 2 are free
  monthlyFee    Decimal    @default(0) @db.Decimal(12, 2)
  status        BaseStatus @default(ACTIVE)
  activatedAt   DateTime   @default(now())
  deactivatedAt DateTime?

  school   School           @relation(fields: [schoolId], references: [id])
  language PlatformLanguage @relation(fields: [languageId], references: [id])

  @@unique([schoolId, languageId])
  @@index([status])
  @@map("school_languages")
  @@schema("public")
}

// Subscription & Billing
model Subscription {
  id                 String             @id @default(uuid()) @db.Uuid
  tenantId           String             @db.Uuid
  planId             String             @db.Uuid
  status             SubscriptionStatus @default(ACTIVE)
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime

  // Per-student billing details
  billedStudents   Int     @default(0) // Students billed in current period
  pricePerStudent  Decimal @db.Decimal(10, 2) // Current rate per student
  lastBilledAmount Decimal @default(0) @db.Decimal(12, 2) // Last billing amount

  cancelAt   DateTime?
  canceledAt DateTime?
  metadata   Json      @default("{}")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  tenant   Tenant           @relation(fields: [tenantId], references: [id])
  plan     SubscriptionPlan @relation(fields: [planId], references: [id])
  invoices Invoice[]

  @@index([tenantId])
  @@index([status])
  @@map("subscriptions")
  @@schema("public")
}

model SubscriptionPlan {
  id          String  @id @default(uuid()) @db.Uuid
  name        String // "Per-Student Essential", "Per-Student Professional"
  code        String  @unique
  description String?

  // Per-student pricing structure
  minStudents     Int     @default(1)
  maxStudents     Int? // null = unlimited
  pricePerStudent Decimal @db.Decimal(10, 2) // Price per student per month

  // Feature set for this tier
  features          Json // Feature list
  includedLanguages Int  @default(2) // Free languages included

  billingPeriod BillingPeriod @default(MONTHLY)
  status        BaseStatus    @default(ACTIVE)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  subscriptions Subscription[]

  @@map("subscription_plans")
  @@schema("public")
}

model TenantUsage {
  id            String   @id @default(uuid()) @db.Uuid
  tenantId      String   @db.Uuid
  billingPeriod DateTime @db.Date // Month/quarter being billed

  // Student counts
  totalStudents     Int // Active students in this period
  newStudents       Int @default(0) // New enrollments
  withdrawnStudents Int @default(0) // Students who left

  // Usage metrics
  schoolCount  Int // Number of active schools
  teacherCount Int // Number of active teachers
  storageUsed  BigInt @default(0) // Storage in bytes
  apiCalls     Int    @default(0) // API usage

  // Language usage
  enabledLanguages String[] // Currently enabled languages
  languageChanges  Json     @default("[]") // Language additions/removals

  // Calculated billing
  baseFee         Decimal @db.Decimal(12, 2) // Student-based fee
  languageFees    Decimal @default(0) @db.Decimal(12, 2)
  premiumFeatures Decimal @default(0) @db.Decimal(12, 2)
  totalBilled     Decimal @db.Decimal(12, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@unique([tenantId, billingPeriod])
  @@index([billingPeriod])
  @@map("tenant_usage")
  @@schema("public")
}

model Invoice {
  id             String        @id @default(uuid()) @db.Uuid
  subscriptionId String        @db.Uuid
  invoiceNumber  String        @unique
  status         InvoiceStatus @default(PENDING)

  // Per-student billing breakdown
  billingPeriod   DateTime @db.Date // Billing month/period
  studentCount    Int // Number of students billed
  pricePerStudent Decimal  @db.Decimal(10, 2) // Rate used for this invoice
  baseAmount      Decimal  @db.Decimal(12, 2) // Student-based amount
  languageFees    Decimal  @default(0) @db.Decimal(12, 2) // Language add-ons
  premiumFeatures Decimal  @default(0) @db.Decimal(12, 2) // Premium features

  // White label billing breakdown
  whiteLabelSetupFee   Decimal @default(0) @db.Decimal(12, 2) // One-time setup fee
  whiteLabelMonthlyFee Decimal @default(0) @db.Decimal(12, 2) // Monthly white label fee
  customDomainFee      Decimal @default(0) @db.Decimal(12, 2) // Custom domain fee
  mobileAppBrandingFee Decimal @default(0) @db.Decimal(12, 2) // Mobile app branding fee

  amount        Decimal   @db.Decimal(12, 2) // Total invoice amount
  tax           Decimal   @default(0) @db.Decimal(12, 2)
  currency      String    @default("IDR")
  dueDate       DateTime
  paidAt        DateTime?
  paymentMethod String?
  metadata      Json      @default("{}")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  subscription Subscription @relation(fields: [subscriptionId], references: [id])

  @@index([subscriptionId])
  @@index([status])
  @@index([dueDate])
  @@index([billingPeriod])
  @@map("invoices")
  @@schema("public")
}

// Platform Features
model PlatformFeature {
  id          String     @id @default(uuid()) @db.Uuid
  platformId  String     @db.Uuid
  code        String     @unique
  name        String
  description String?
  category    String
  isCore      Boolean    @default(false)
  status      BaseStatus @default(ACTIVE)

  platform Platform @relation(fields: [platformId], references: [id])

  @@index([platformId])
  @@index([category])
  @@map("platform_features")
  @@schema("public")
}

// White Label Plans
model WhiteLabelPlan {
  id          String  @id @default(uuid()) @db.Uuid
  name        String // "Basic White Label", "Premium White Label"
  code        String  @unique
  description String?

  // Pricing structure
  setupFee        Decimal @db.Decimal(12, 2) // Biaya setup sekali
  monthlyFee      Decimal @db.Decimal(12, 2) // Biaya bulanan
  customDomainFee Decimal @db.Decimal(12, 2) // Biaya domain custom per tahun
  mobileAppFee    Decimal @db.Decimal(12, 2) // Biaya mobile app branding per bulan

  // Features included
  features Json @default("{}")
  /**
   * Struktur features:
   * {
   * "customDomain": true,
   * "sslCertificate": true,
   * "logoCustomization": true,
   * "colorCustomization": true,
   * "hidePlatformBranding": true,
   * "customEmailTemplates": true,
   * "mobileAppBranding": false,
   * "customCSSSupport": true,
   * "prioritySupport": true,
   * "maxCustomDomains": 1
   * }
   */

  status    BaseStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  subscriptions WhiteLabelSubscription[]

  @@map("white_label_plans")
  @@schema("public")
}

// White Label Subscriptions
model WhiteLabelSubscription {
  id       String           @id @default(uuid()) @db.Uuid
  schoolId String           @db.Uuid
  planId   String           @db.Uuid
  status   WhiteLabelStatus @default(ACTIVE)

  domainVerified Boolean   @default(false)
  sslEnabled     Boolean   @default(false)
  sslExpiry      DateTime?

  // Billing
  setupPaid        Boolean  @default(false)
  nextBillingDate  DateTime
  lastBilledAmount Decimal  @db.Decimal(12, 2)

  activatedAt DateTime  @default(now())
  expiresAt   DateTime?
  metadata    Json      @default("{}")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  plan WhiteLabelPlan @relation(fields: [planId], references: [id])

  @@unique([schoolId]) // Satu sekolah hanya bisa punya satu subscription aktif
  @@index([status])
  @@map("white_label_subscriptions")
  @@schema("public")
}

// Domain Verification
model DomainVerification {
  id           String             @id @default(uuid()) @db.Uuid
  schoolId     String             @db.Uuid
  domain       String
  verifyToken  String             @unique // Token untuk verifikasi DNS
  verifyMethod VerificationMethod
  verified     Boolean            @default(false)
  verifiedAt   DateTime?
  expiresAt    DateTime // Token expiry
  attempts     Int                @default(0)
  lastAttempt  DateTime?
  metadata     Json               @default("{}")
  createdAt    DateTime           @default(now())

  @@unique([schoolId, domain])
  @@index([verifyToken])
  @@index([verified])
  @@map("domain_verifications")
  @@schema("public")
}

// Platform User Management
model TenantUser {
  id          String     @id @default(uuid()) @db.Uuid
  tenantId    String     @db.Uuid
  email       String     @unique
  password    String
  role        TenantRole
  status      UserStatus @default(ACTIVE)
  lastLoginAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
  @@index([email])
  @@index([status])
  @@map("tenant_users")
  @@schema("public")
}

// ==================== TENANT LEVEL (tenant schema) ====================

// User Management
model User {
  id            String     @id @default(uuid()) @db.Uuid
  schoolId      String     @db.Uuid
  email         String     @unique
  username      String?    @unique
  password      String
  role          UserRole
  status        UserStatus @default(ACTIVE)
  emailVerified Boolean    @default(false)
  phoneNumber   String?
  phoneVerified Boolean    @default(false)

  // ✅ ENHANCED: Multi-language preferences
  preferredLanguage    String  @default("id") // Default language preference
  uiLanguage           String? // Language untuk interface (jika berbeda dari preferred)
  notificationLanguage String? // Language untuk notifikasi (email, SMS, push)
  documentLanguage     String? // Language untuk dokumen (rapor, invoice, dll)

  twoFactorEnabled Boolean   @default(false)
  twoFactorSecret  String?
  lastLoginAt      DateTime?
  lastLoginIp      String?
  failedLoginCount Int       @default(0)
  lockedUntil      DateTime?
  metadata         Json      @default("{}")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  profile       UserProfile?
  sessions      Session[]
  auditLogs     AuditLog[]
  notifications Notification[]

  // Role-specific relations
  teacherProfile Teacher?
  studentProfile Student?
  parentProfile  Parent?
  staffProfile   Staff?

  @@index([schoolId])
  @@index([email])
  @@index([role])
  @@index([status])
  @@map("users")
  @@schema("tenant")
}

model UserProfile {
  id               String    @id @default(uuid()) @db.Uuid
  userId           String    @unique @db.Uuid
  firstName        String
  lastName         String
  displayName      String?
  avatar           String?
  dateOfBirth      DateTime?
  gender           Gender?
  address          Json?
  emergencyContact Json?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
  @@schema("tenant")
}

// Student Management
model Student {
  id                  String        @id @default(uuid()) @db.Uuid
  userId              String        @unique @db.Uuid
  schoolId            String        @db.Uuid
  currentEnrollmentId String?       @db.Uuid // Link to active enrollment
  studentNumber       String        @unique
  nisn                String?       @unique // National Student Number
  nik                 String? // National ID
  birthCertificateNo  String?
  admissionDate       DateTime
  admissionNumber     String?
  previousSchool      Json?
  bloodType           String?
  religion            String?
  specialNeeds        Json?
  healthInfo          Json?
  status              StudentStatus @default(ACTIVE)
  graduationDate      DateTime?
  metadata            Json          @default("{}")
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  enrollments          Enrollment[]
  attendances          StudentAttendance[]
  academicRecords      AcademicRecord[]
  assessments          StudentAssessment[]
  disciplineRecords    DisciplineRecord[]
  achievements         Achievement[]
  parentRelations      StudentParent[]
  dailyActivities      StudentDailyActivity[] // ✅ NEW: For KB/TK daily tracking
  ParentTeacherMessage ParentTeacherMessage[]
  ParentConsent        ParentConsent[]

  @@index([schoolId])
  @@index([studentNumber])
  @@index([nisn])
  @@index([status])
  @@map("students")
  @@schema("tenant")
}

// Parent Management
model Parent {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String   @unique @db.Uuid
  nik           String?  @unique
  occupation    String?
  employer      String?
  income        String? // Encrypted
  education     String?
  maritalStatus String?
  metadata      Json     @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  studentRelations StudentParent[]

  // ✅ NEW: Parent engagement tracking
  portalMetrics     ParentPortalMetrics?
  notificationPrefs ParentNotificationPreference?
  consents          ParentConsent[]

  @@index([nik])
  @@map("parents")
  @@schema("tenant")
}

model StudentParent {
  id                String             @id @default(uuid()) @db.Uuid
  studentId         String             @db.Uuid
  parentId          String             @db.Uuid
  relationship      ParentRelationship
  isPrimary         Boolean            @default(false)
  hasLegalGuardian  Boolean            @default(false)
  emergencyPriority Int                @default(1)

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  parent  Parent  @relation(fields: [parentId], references: [id], onDelete: Cascade)

  @@unique([studentId, parentId])
  @@index([isPrimary])
  @@map("student_parents")
  @@schema("tenant")
}

// ✅ NEW: Parent Portal Enhancements
model ParentPortalMetrics {
  id                String    @id @default(uuid()) @db.Uuid
  parentId          String    @unique @db.Uuid
  lastLoginAt       DateTime?
  reportCardsViewed Int       @default(0)
  paymentsViewed    Int       @default(0)
  messagesRead      Int       @default(0)
  attendanceChecks  Int       @default(0)
  activitiesViewed  Int       @default(0) // For KB/TK daily activities
  lastActivityAt    DateTime?
  loginCount        Int       @default(0)
  preferredDevice   String? // mobile, tablet, desktop
  appVersion        String? // For mobile app tracking
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  parent Parent @relation(fields: [parentId], references: [id])

  @@map("parent_portal_metrics")
  @@schema("tenant")
}

model ParentNotificationPreference {
  id       String @id @default(uuid()) @db.Uuid
  parentId String @unique @db.Uuid

  // Academic notifications
  gradeUpdates      Boolean @default(true)
  attendanceAlerts  Boolean @default(true)
  homeworkReminders Boolean @default(false)
  assessmentResults Boolean @default(true)
  reportCardReady   Boolean @default(true)

  // Financial notifications
  paymentReminders Boolean @default(true)
  invoiceAlerts    Boolean @default(true)
  overdueNotices   Boolean @default(true)

  // Activity notifications (KB/TK)
  dailyActivities Boolean @default(true)
  mealUpdates     Boolean @default(true)
  napTime         Boolean @default(false)
  photoUpdates    Boolean @default(true)

  // Communication preferences
  emailEnabled    Boolean @default(true)
  smsEnabled      Boolean @default(false)
  whatsappEnabled Boolean @default(true)
  pushEnabled     Boolean @default(true)

  // Timing preferences
  quietHoursStart      DateTime? @db.Time // Don't send after this time
  quietHoursEnd        DateTime? @db.Time // Resume sending after this time
  weekendNotifications Boolean   @default(false) // Send on weekends

  // Batching preferences
  immediateAlerts String[] // Types that should be sent immediately
  digestFrequency DigestFrequency @default(DAILY)
  digestTime      DateTime?       @db.Time // Preferred time for digest

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent Parent @relation(fields: [parentId], references: [id])

  @@map("parent_notification_preferences")
  @@schema("tenant")
}

model StudentDailyActivity {
  id        String   @id @default(uuid()) @db.Uuid
  studentId String   @db.Uuid
  date      DateTime @db.Date

  // Check-in/out times
  arrivalTime   DateTime?
  departureTime DateTime?
  pickedUpBy    String? // Who picked up the child

  // Mood & behavior
  moodOnArrival   String? // Happy, Sad, Neutral, Excited, Tired
  moodAtDeparture String?
  overallBehavior String? // Excellent, Good, Fair, Needs Attention

  // Meals & Health
  breakfastStatus String? // All, Most, Some, None
  lunchStatus     String?
  snackStatus     String?
  waterIntake     String? // Excellent, Good, Fair, Poor

  // Rest & hygiene
  napTime        Json? // {start: "13:00", end: "14:30", quality: "good"}
  bathroomVisits Int   @default(0)
  diaperChanges  Int   @default(0) // For very young children

  // Activities & Learning
  activities     Json[] // Array of {time, activity, participation, notes}
  learningTopics String[] // What was taught today
  specialMoments String? // Notable events or achievements

  // Social interactions
  playedWith  String[] // Names of friends played with
  socialNotes String? // Social behavior observations

  // Teacher observations
  teacherNotes   String?
  concernsRaised String?

  // Media attachments
  photos Json[] // {url, caption, time, activity}
  videos Json[] // Short video clips

  // Health notes
  temperature     Decimal? @db.Decimal(3, 1) // If checked
  medicationGiven Json? // {medicine, time, dose}
  injuryReport    Json? // {description, time, treatment}

  createdBy String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student Student @relation(fields: [studentId], references: [id])

  @@unique([studentId, date])
  @@index([date])
  @@map("student_daily_activities")
  @@schema("tenant")
}

model ParentTeacherMessage {
  id                 String          @id @default(uuid()) @db.Uuid
  conversationId     String          @db.Uuid
  requestedBy        String          @db.Uuid // Parent or Teacher ID
  requestedByRole    UserRole // PARENT or TEACHER
  studentId          String          @db.Uuid
  subject            String
  urgency            Priority        @default(NORMAL)
  category           MessageCategory
  status             MessageStatus   @default(OPEN)
  resolvedAt         DateTime?
  resolvedBy         String?         @db.Uuid
  satisfactionRating Int? // 1-5 rating from parent

  conversation Conversation @relation(fields: [conversationId], references: [id])
  student      Student      @relation(fields: [studentId], references: [id])

  @@index([status])
  @@index([studentId])
  @@index([urgency])
  @@map("parent_teacher_messages")
  @@schema("tenant")
}

model ParentConsent {
  id          String      @id @default(uuid()) @db.Uuid
  parentId    String      @db.Uuid
  studentId   String      @db.Uuid
  consentType ConsentType
  granted     Boolean
  grantedAt   DateTime?
  grantedBy   String? // IP address or device ID
  expiresAt   DateTime?
  documentUrl String? // Signed consent form
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  parent  Parent  @relation(fields: [parentId], references: [id])
  student Student @relation(fields: [studentId], references: [id])

  @@unique([parentId, studentId, consentType])
  @@index([consentType])
  @@index([expiresAt])
  @@map("parent_consents")
  @@schema("tenant")
}

// ✅ NEW: Notification Templates by Education Level
model NotificationPreferenceTemplate {
  id             String                @id @default(uuid()) @db.Uuid
  schoolLevel    SchoolLevel
  category       NotificationCategory
  defaultEnabled Boolean
  defaultChannel NotificationChannel[]
  defaultTiming  NotificationTiming // immediate, daily, weekly, monthly
  maxDailyCount  Int                   @default(10) // Max notifications per day
  priority       Int                   @default(1) // Higher number = higher priority

  @@unique([schoolLevel, category])
  @@map("notification_preference_templates")
  @@schema("tenant")
}

// Teacher Management
model Teacher {
  id              String         @id @default(uuid()) @db.Uuid
  userId          String         @unique @db.Uuid
  employeeNumber  String         @unique
  nip             String?        @unique // Government Employee Number
  nuptk           String?        @unique // Teacher Registration Number
  qualification   String
  certifications  Json           @default("[]")
  specializations String[]
  joinDate        DateTime
  employmentType  EmploymentType
  status          TeacherStatus  @default(ACTIVE)
  metadata        Json           @default("{}")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  classTeacher Class[]             @relation("ClassTeacher")
  subjects     SubjectTeacher[]
  schedules    Schedule[]
  attendances  TeacherAttendance[]
  leaves       Leave[]

  @@index([employeeNumber])
  @@index([nip])
  @@index([nuptk])
  @@index([status])
  @@map("teachers")
  @@schema("tenant")
}

// Staff Management
model Staff {
  id             String         @id @default(uuid()) @db.Uuid
  userId         String         @unique @db.Uuid
  employeeNumber String         @unique
  department     String
  position       String
  joinDate       DateTime
  employmentType EmploymentType
  status         StaffStatus    @default(ACTIVE)
  metadata       Json           @default("{}")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  attendances StaffAttendance[]
  leaves      Leave[]

  @@index([employeeNumber])
  @@index([department])
  @@index([status])
  @@map("staff")
  @@schema("tenant")
}

// Academic Structure
model AcademicYear {
  id        String   @id @default(uuid()) @db.Uuid
  schoolId  String   @db.Uuid
  name      String
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(false)
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  terms       AcademicTerm[]
  enrollments Enrollment[]
  classes     Class[]

  @@unique([schoolId, name])
  @@index([isActive])
  @@index([schoolId])
  @@map("academic_years")
  @@schema("tenant")
}

model AcademicTerm {
  id             String   @id @default(uuid()) @db.Uuid
  academicYearId String   @db.Uuid
  name           String
  termNumber     Int
  startDate      DateTime
  endDate        DateTime
  isActive       Boolean  @default(false)

  academicYear    AcademicYear     @relation(fields: [academicYearId], references: [id])
  academicRecords AcademicRecord[]
  reportCards     ReportCard[]
  assessments     Assessment[]
  schedules       Schedule[]

  @@unique([academicYearId, termNumber])
  @@index([isActive])
  @@map("academic_terms")
  @@schema("tenant")
}

model Grade {
  id       String      @id @default(uuid()) @db.Uuid
  schoolId String      @db.Uuid
  level    SchoolLevel
  name     String
  code     String
  order    Int

  classes             Class[]
  subjects            Subject[]
  curricula           GradeCurriculum[]
  enrollments         Enrollment[]
  previousEnrollments Enrollment[]       @relation("PreviousGrade") // ✅ For promotion tracking
  GradeTranslation    GradeTranslation[]

  @@unique([schoolId, code])
  @@index([level])
  @@index([schoolId])
  @@map("grades")
  @@schema("tenant")
}

model Class {
  id             String     @id @default(uuid()) @db.Uuid
  gradeId        String     @db.Uuid
  name           String
  code           String     @unique
  capacity       Int
  currentSize    Int        @default(0)
  homeTeacherId  String?    @db.Uuid
  roomId         String?    @db.Uuid
  academicYearId String     @db.Uuid
  status         BaseStatus @default(ACTIVE)
  metadata       Json       @default("{}")
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  grade        Grade        @relation(fields: [gradeId], references: [id])
  homeTeacher  Teacher?     @relation("ClassTeacher", fields: [homeTeacherId], references: [id])
  room         Room?        @relation(fields: [roomId], references: [id])
  academicYear AcademicYear @relation(fields: [academicYearId], references: [id])

  enrollments Enrollment[] // ✅ Track students via enrollments
  schedules   Schedule[]

  @@index([gradeId])
  @@index([academicYearId])
  @@index([status])
  @@map("classes")
  @@schema("tenant")
}

// Curriculum & Subjects
model Curriculum {
  id          String         @id @default(uuid()) @db.Uuid
  schoolId    String         @db.Uuid
  name        String
  code        String
  type        CurriculumType // KURMER, KTSP, Cambridge, etc
  description String?
  isActive    Boolean        @default(true)
  metadata    Json           @default("{}")
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  gradeCurricula GradeCurriculum[]

  @@unique([schoolId, code])
  @@index([type])
  @@index([isActive])
  @@index([schoolId])
  @@map("curricula")
  @@schema("tenant")
}

model GradeCurriculum {
  id           String @id @default(uuid()) @db.Uuid
  gradeId      String @db.Uuid
  curriculumId String @db.Uuid

  grade      Grade      @relation(fields: [gradeId], references: [id])
  curriculum Curriculum @relation(fields: [curriculumId], references: [id])

  @@unique([gradeId, curriculumId])
  @@map("grade_curricula")
  @@schema("tenant")
}

model Subject {
  id           String          @id @default(uuid()) @db.Uuid
  gradeId      String          @db.Uuid
  code         String
  name         Json // Multilingual
  category     SubjectCategory
  creditHours  Int
  passingGrade Int
  isCore       Boolean         @default(true)
  metadata     Json            @default("{}")
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  grade              Grade                @relation(fields: [gradeId], references: [id])
  teachers           SubjectTeacher[]
  schedules          Schedule[]
  assessments        Assessment[]
  academicRecords    AcademicRecord[]
  SubjectTranslation SubjectTranslation[]

  @@unique([gradeId, code])
  @@index([category])
  @@index([gradeId])
  @@map("subjects")
  @@schema("tenant")
}

model SubjectTeacher {
  id        String  @id @default(uuid()) @db.Uuid
  subjectId String  @db.Uuid
  teacherId String  @db.Uuid
  isPrimary Boolean @default(false)

  subject Subject @relation(fields: [subjectId], references: [id])
  teacher Teacher @relation(fields: [teacherId], references: [id])

  @@unique([subjectId, teacherId])
  @@map("subject_teachers")
  @@schema("tenant")
}

// Enrollment & Academic Records
model Enrollment {
  id             String           @id @default(uuid()) @db.Uuid
  studentId      String           @db.Uuid
  academicYearId String           @db.Uuid
  gradeId        String           @db.Uuid
  classId        String           @db.Uuid
  enrollmentDate DateTime
  completionDate DateTime? // ✅ ENHANCED: When this enrollment ended
  status         EnrollmentStatus @default(ACTIVE)

  // ✅ ENHANCED: Grade progression tracking
  isPromotion     Boolean        @default(false) // Is this a promotion from previous grade?
  previousGradeId String?        @db.Uuid // Previous grade (for promotion tracking)
  promotionType   PromotionType? // REGULAR, ACCELERATED, RETAINED, CONDITIONAL

  // ✅ ENHANCED: Academic performance context
  finalGPA       Decimal? @db.Decimal(4, 2) // GPA at end of this enrollment
  completionNote String? // Notes about completion (graduated, transferred, etc.)

  // ✅ ENHANCED: Approval workflow
  approvedBy String?   @db.Uuid // Who approved this enrollment/promotion
  approvedAt DateTime? // When it was approved

  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student       Student      @relation(fields: [studentId], references: [id])
  academicYear  AcademicYear @relation(fields: [academicYearId], references: [id])
  grade         Grade        @relation(fields: [gradeId], references: [id])
  class         Class        @relation(fields: [classId], references: [id])
  previousGrade Grade?       @relation("PreviousGrade", fields: [previousGradeId], references: [id])

  @@unique([studentId, academicYearId])
  @@index([status])
  @@index([academicYearId])
  @@index([gradeId])
  @@index([isPromotion])
  @@map("enrollments")
  @@schema("tenant")
}

model AcademicRecord {
  id          String       @id @default(uuid()) @db.Uuid
  studentId   String       @db.Uuid
  termId      String       @db.Uuid
  subjectId   String       @db.Uuid
  finalGrade  Decimal      @db.Decimal(5, 2)
  letterGrade String?
  gpa         Decimal      @db.Decimal(4, 2)
  credits     Int
  status      RecordStatus @default(DRAFT)
  metadata    Json         @default("{}")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  student Student      @relation(fields: [studentId], references: [id])
  term    AcademicTerm @relation(fields: [termId], references: [id])
  subject Subject      @relation(fields: [subjectId], references: [id])

  @@unique([studentId, termId, subjectId])
  @@index([status])
  @@index([termId])
  @@map("academic_records")
  @@schema("tenant")
}

// Assessment System
model Assessment {
  id            String           @id @default(uuid()) @db.Uuid
  subjectId     String           @db.Uuid
  classId       String           @db.Uuid
  teacherId     String           @db.Uuid
  termId        String           @db.Uuid
  name          String
  type          AssessmentType
  weight        Decimal          @db.Decimal(5, 2)
  totalMarks    Int
  passingMarks  Int
  scheduledDate DateTime
  dueDate       DateTime?
  instructions  String?
  attachments   Json?
  status        AssessmentStatus @default(DRAFT)
  metadata      Json             @default("{}")
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  subject            Subject             @relation(fields: [subjectId], references: [id])
  term               AcademicTerm        @relation(fields: [termId], references: [id])
  studentAssessments StudentAssessment[]

  @@index([subjectId])
  @@index([classId])
  @@index([type])
  @@index([status])
  @@index([termId])
  @@map("assessments")
  @@schema("tenant")
}

model StudentAssessment {
  id           String           @id @default(uuid()) @db.Uuid
  assessmentId String           @db.Uuid
  studentId    String           @db.Uuid
  score        Decimal?         @db.Decimal(5, 2)
  letterGrade  String?
  feedback     String?
  submittedAt  DateTime?
  gradedAt     DateTime?
  gradedBy     String?          @db.Uuid
  status       SubmissionStatus @default(PENDING)
  metadata     Json             @default("{}")
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  assessment Assessment @relation(fields: [assessmentId], references: [id])
  student    Student    @relation(fields: [studentId], references: [id])

  @@unique([assessmentId, studentId])
  @@index([status])
  @@map("student_assessments")
  @@schema("tenant")
}

// Attendance System
model StudentAttendance {
  id           String           @id @default(uuid()) @db.Uuid
  studentId    String           @db.Uuid
  date         DateTime         @db.Date
  scheduleId   String?          @db.Uuid
  status       AttendanceStatus
  checkInTime  DateTime?
  checkOutTime DateTime?
  lateMinutes  Int              @default(0)
  reason       String?
  verifiedBy   String?          @db.Uuid
  metadata     Json             @default("{}")
  createdAt    DateTime         @default(now())

  student  Student   @relation(fields: [studentId], references: [id])
  schedule Schedule? @relation(fields: [scheduleId], references: [id])

  @@unique([studentId, date, scheduleId])
  @@index([date])
  @@index([status])
  @@map("student_attendances")
  @@schema("tenant")
}

model TeacherAttendance {
  id              String           @id @default(uuid()) @db.Uuid
  teacherId       String           @db.Uuid
  date            DateTime         @db.Date
  checkInTime     DateTime?
  checkOutTime    DateTime?
  status          AttendanceStatus
  lateMinutes     Int              @default(0)
  overtimeMinutes Int              @default(0)
  verifiedBy      String?          @db.Uuid
  metadata        Json             @default("{}")
  createdAt       DateTime         @default(now())

  teacher Teacher @relation(fields: [teacherId], references: [id])

  @@unique([teacherId, date])
  @@index([date])
  @@index([status])
  @@map("teacher_attendances")
  @@schema("tenant")
}

model StaffAttendance {
  id              String           @id @default(uuid()) @db.Uuid
  staffId         String           @db.Uuid
  date            DateTime         @db.Date
  checkInTime     DateTime?
  checkOutTime    DateTime?
  status          AttendanceStatus
  lateMinutes     Int              @default(0)
  overtimeMinutes Int              @default(0)
  verifiedBy      String?          @db.Uuid
  metadata        Json             @default("{}")
  createdAt       DateTime         @default(now())

  staff Staff @relation(fields: [staffId], references: [id])

  @@unique([staffId, date])
  @@index([date])
  @@index([status])
  @@map("staff_attendances")
  @@schema("tenant")
}

// Leave Management
model Leave {
  id          String      @id @default(uuid()) @db.Uuid
  teacherId   String?     @db.Uuid
  staffId     String?     @db.Uuid
  type        LeaveType
  startDate   DateTime
  endDate     DateTime
  reason      String
  attachments Json?
  status      LeaveStatus @default(PENDING)
  approvedBy  String?     @db.Uuid
  approvedAt  DateTime?
  comments    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  teacher Teacher? @relation(fields: [teacherId], references: [id])
  staff   Staff?   @relation(fields: [staffId], references: [id])

  @@index([status])
  @@index([startDate, endDate])
  @@map("leaves")
  @@schema("tenant")
}

// Schedule Management
model Schedule {
  id          String   @id @default(uuid()) @db.Uuid
  classId     String   @db.Uuid
  subjectId   String   @db.Uuid
  teacherId   String   @db.Uuid
  roomId      String   @db.Uuid
  termId      String   @db.Uuid
  dayOfWeek   Int // 0-6
  startTime   DateTime @db.Time
  endTime     DateTime @db.Time
  isRecurring Boolean  @default(true)
  metadata    Json     @default("{}")

  class       Class               @relation(fields: [classId], references: [id])
  subject     Subject             @relation(fields: [subjectId], references: [id])
  teacher     Teacher             @relation(fields: [teacherId], references: [id])
  room        Room                @relation(fields: [roomId], references: [id])
  term        AcademicTerm        @relation(fields: [termId], references: [id])
  attendances StudentAttendance[]

  @@index([classId])
  @@index([teacherId])
  @@index([dayOfWeek])
  @@index([termId])
  @@map("schedules")
  @@schema("tenant")
}

// Facility Management
model Room {
  id         String     @id @default(uuid()) @db.Uuid
  buildingId String     @db.Uuid
  name       String
  code       String     @unique
  type       RoomType
  capacity   Int
  floor      Int
  facilities Json       @default("[]")
  status     RoomStatus @default(AVAILABLE)

  building  Building   @relation(fields: [buildingId], references: [id])
  classes   Class[]
  schedules Schedule[]

  @@index([type])
  @@index([status])
  @@map("rooms")
  @@schema("tenant")
}

model Building {
  id       String     @id @default(uuid()) @db.Uuid
  schoolId String     @db.Uuid
  name     String
  code     String     @unique
  floors   Int
  status   BaseStatus @default(ACTIVE)

  rooms Room[]

  @@index([schoolId])
  @@map("buildings")
  @@schema("tenant")
}

// Enhanced Financial Management with Installment Support
model InstallmentPlan {
  id              String     @id @default(uuid()) @db.Uuid
  schoolId        String     @db.Uuid
  name            String // "Uang Gedung 12x", "SPP Bulanan"
  code            String     @unique
  description     String?
  maxInstallments Int        @default(1) // 1 = tunai, >1 = cicilan
  lateFeeRate     Decimal    @default(0) @db.Decimal(5, 4) // 0.0100 = 1%
  minDownPayment  Decimal    @default(0) @db.Decimal(5, 2) // Minimum DP %
  allowPartial    Boolean    @default(false) // Boleh bayar sebagian
  gracePeriodDays Int        @default(0) // Grace period telat
  status          BaseStatus @default(ACTIVE)
  metadata        Json       @default("{}")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  feeStructures FeeStructure[]

  @@index([schoolId])
  @@index([status])
  @@map("installment_plans")
  @@schema("tenant")
}

model FeeStructure {
  id                String       @id @default(uuid()) @db.Uuid
  schoolId          String       @db.Uuid
  academicYearId    String       @db.Uuid
  gradeId           String       @db.Uuid
  installmentPlanId String?      @db.Uuid // Link to installment plan
  name              String
  code              String
  amount            Decimal      @db.Decimal(12, 2)
  type              FeeType
  frequency         FeeFrequency
  dueDay            Int? // Day of month
  isOptional        Boolean      @default(false)
  description       String?
  metadata          Json         @default("{}")
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  installmentPlan InstallmentPlan? @relation(fields: [installmentPlanId], references: [id])
  feeAssignments  FeeAssignment[]

  @@unique([schoolId, academicYearId, gradeId, code])
  @@index([type])
  @@index([schoolId])
  @@map("fee_structures")
  @@schema("tenant")
}

model FeeAssignment {
  id               String              @id @default(uuid()) @db.Uuid
  feeStructureId   String              @db.Uuid
  studentId        String              @db.Uuid
  totalAmount      Decimal             @db.Decimal(12, 2) // Total yang harus dibayar
  paidAmount       Decimal             @default(0) @db.Decimal(12, 2) // Sudah dibayar
  remainingAmount  Decimal             @db.Decimal(12, 2) // Sisa yang harus dibayar
  discount         Decimal             @default(0) @db.Decimal(12, 2)
  discountReason   String?
  interestAmount   Decimal             @default(0) @db.Decimal(12, 2) // Bunga cicilan
  lateFeeAmount    Decimal             @default(0) @db.Decimal(12, 2) // Denda telat
  installmentCount Int                 @default(1) // Jumlah cicilan (1=tunai)
  paidInstallments Int                 @default(0) // Cicilan ke berapa sudah lunas
  paymentType      PaymentType         @default(FULL) // FULL atau INSTALLMENT
  status           FeeAssignmentStatus @default(PENDING)
  dueDate          DateTime // Due date cicilan pertama/tunai
  finalDueDate     DateTime? // Due date cicilan terakhir
  metadata         Json                @default("{}")
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  feeStructure       FeeStructure        @relation(fields: [feeStructureId], references: [id])
  installmentDetails InstallmentDetail[]
  payments           Payment[]
  paymentReminders   PaymentReminder[]

  @@unique([feeStructureId, studentId])
  @@index([studentId])
  @@index([status])
  @@index([paymentType])
  @@index([dueDate])
  @@map("fee_assignments")
  @@schema("tenant")
}

model InstallmentDetail {
  id              String            @id @default(uuid()) @db.Uuid
  feeAssignmentId String            @db.Uuid
  installmentNo   Int // Cicilan ke-1, ke-2, dst
  amount          Decimal           @db.Decimal(12, 2) // Nominal cicilan ini
  paidAmount      Decimal           @default(0) @db.Decimal(12, 2) // Sudah dibayar
  interestAmount  Decimal           @default(0) @db.Decimal(12, 2) // Bunga cicilan ini
  lateFeeAmount   Decimal           @default(0) @db.Decimal(12, 2) // Denda telat
  dueDate         DateTime // Jatuh tempo cicilan ini
  status          InstallmentStatus @default(PENDING)
  paidAt          DateTime? // Kapan lunas
  metadata        Json              @default("{}")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  feeAssignment FeeAssignment @relation(fields: [feeAssignmentId], references: [id])
  payments      Payment[]

  @@unique([feeAssignmentId, installmentNo])
  @@index([status])
  @@index([dueDate])
  @@map("installment_details")
  @@schema("tenant")
}

model Payment {
  id                  String        @id @default(uuid()) @db.Uuid
  feeAssignmentId     String        @db.Uuid
  installmentDetailId String?       @db.Uuid // Untuk cicilan, null untuk tunai
  studentId           String        @db.Uuid
  transactionId       String        @unique
  amount              Decimal       @db.Decimal(12, 2)
  principalAmount     Decimal       @db.Decimal(12, 2) // Pokok
  interestAmount      Decimal       @default(0) @db.Decimal(12, 2) // Bunga
  lateFeeAmount       Decimal       @default(0) @db.Decimal(12, 2) // Denda
  paymentMethod       PaymentMethod
  paymentGateway      String?
  status              PaymentStatus @default(PENDING)
  paidAt              DateTime?
  receiptNumber       String?
  receiptUrl          String?
  referenceNumber     String? // Bank reference, etc
  metadata            Json          @default("{}")
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  feeAssignment     FeeAssignment      @relation(fields: [feeAssignmentId], references: [id])
  installmentDetail InstallmentDetail? @relation(fields: [installmentDetailId], references: [id])

  @@index([studentId])
  @@index([status])
  @@index([paymentMethod])
  @@index([paidAt])
  @@map("payments")
  @@schema("tenant")
}

model PaymentReminder {
  id              String             @id @default(uuid()) @db.Uuid
  feeAssignmentId String             @db.Uuid
  installmentId   String?            @db.Uuid
  studentId       String             @db.Uuid
  reminderType    ReminderType // BEFORE_DUE, OVERDUE, FINAL_NOTICE
  daysBeforeDue   Int? // Untuk BEFORE_DUE
  daysAfterDue    Int? // Untuk OVERDUE
  status          ReminderStatus     @default(PENDING)
  sentAt          DateTime?
  sentBy          NotificationMethod // EMAIL, SMS, WHATSAPP, PUSH
  metadata        Json               @default("{}")
  createdAt       DateTime           @default(now())

  feeAssignment FeeAssignment @relation(fields: [feeAssignmentId], references: [id])

  @@index([studentId])
  @@index([status])
  @@index([reminderType])
  @@map("payment_reminders")
  @@schema("tenant")
}

// Report Card System
model ReportCardTemplate {
  id        String         @id @default(uuid()) @db.Uuid
  schoolId  String         @db.Uuid
  name      String
  code      String         @unique
  type      ReportCardType
  level     SchoolLevel[]
  layout    Json // Template structure
  sections  Json // Dynamic sections
  formulas  Json // Calculation formulas
  isActive  Boolean        @default(true)
  version   Int            @default(1)
  createdBy String         @db.Uuid
  metadata  Json           @default("{}")
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  reportCards ReportCard[]

  @@index([type])
  @@index([isActive])
  @@index([schoolId])
  @@map("report_card_templates")
  @@schema("tenant")
}

model ReportCard {
  id          String           @id @default(uuid()) @db.Uuid
  templateId  String           @db.Uuid
  studentId   String           @db.Uuid
  termId      String           @db.Uuid
  data        Json // Dynamic content based on template
  status      ReportCardStatus @default(DRAFT)
  generatedAt DateTime?
  approvedBy  String?          @db.Uuid
  approvedAt  DateTime?
  publishedAt DateTime?
  metadata    Json             @default("{}")
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  template ReportCardTemplate @relation(fields: [templateId], references: [id])
  term     AcademicTerm       @relation(fields: [termId], references: [id])

  @@unique([studentId, termId])
  @@index([status])
  @@index([termId])
  @@map("report_cards")
  @@schema("tenant")
}

// Behavior & Discipline
model DisciplineRecord {
  id               String         @id @default(uuid()) @db.Uuid
  studentId        String         @db.Uuid
  type             DisciplineType
  severity         Severity
  description      String
  actionTaken      String?
  reportedBy       String         @db.Uuid
  witnessedBy      Json?
  parentNotified   Boolean        @default(false)
  followUpRequired Boolean        @default(false)
  resolvedAt       DateTime?
  metadata         Json           @default("{}")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  student Student @relation(fields: [studentId], references: [id])

  @@index([type])
  @@index([severity])
  @@index([studentId])
  @@map("discipline_records")
  @@schema("tenant")
}

model Achievement {
  id             String          @id @default(uuid()) @db.Uuid
  studentId      String          @db.Uuid
  type           AchievementType
  title          String
  description    String?
  level          String? // School, District, National, International
  date           DateTime
  certificateUrl String?
  metadata       Json            @default("{}")
  createdAt      DateTime        @default(now())

  student Student @relation(fields: [studentId], references: [id])

  @@index([type])
  @@index([date])
  @@index([studentId])
  @@map("achievements")
  @@schema("tenant")
}

// Communication
model Announcement {
  id                      String                    @id @default(uuid()) @db.Uuid
  schoolId                String                    @db.Uuid
  title                   Json // Multilingual
  content                 Json // Multilingual
  type                    AnnouncementType
  priority                Priority                  @default(NORMAL)
  targetAudience          String[] // Roles or specific groups
  attachments             Json?
  publishAt               DateTime
  expiresAt               DateTime?
  createdBy               String                    @db.Uuid
  status                  PublishStatus             @default(DRAFT)
  metadata                Json                      @default("{}")
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  AnnouncementTranslation AnnouncementTranslation[]

  @@index([type])
  @@index([priority])
  @@index([status])
  @@index([publishAt])
  @@index([schoolId])
  @@map("announcements")
  @@schema("tenant")
}

model Message {
  id             String    @id @default(uuid()) @db.Uuid
  conversationId String    @db.Uuid
  senderId       String    @db.Uuid
  content        String
  attachments    Json?
  readBy         Json      @default("[]")
  editedAt       DateTime?
  deletedAt      DateTime?
  metadata       Json      @default("{}")
  createdAt      DateTime  @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id])

  @@index([conversationId])
  @@index([senderId])
  @@map("messages")
  @@schema("tenant")
}

model Conversation {
  id            String           @id @default(uuid()) @db.Uuid
  type          ConversationType
  participants  String[]
  subject       String?
  lastMessageAt DateTime?
  metadata      Json             @default("{}")
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  messages              Message[]
  parentTeacherMessages ParentTeacherMessage[]

  @@index([type])
  @@index([lastMessageAt])
  @@map("conversations")
  @@schema("tenant")
}

model Notification {
  id        String           @id @default(uuid()) @db.Uuid
  userId    String           @db.Uuid
  type      NotificationType
  title     String
  content   String
  data      Json?
  readAt    DateTime?
  clickedAt DateTime?
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId, readAt])
  @@index([type])
  @@index([createdAt])
  @@map("notifications")
  @@schema("tenant")
}

// Integration & External Systems
model Integration {
  id              String            @id @default(uuid()) @db.Uuid
  schoolId        String            @db.Uuid
  type            IntegrationType
  name            String
  config          Json // Encrypted
  credentials     Json // Encrypted
  status          IntegrationStatus @default(INACTIVE)
  lastSyncAt      DateTime?
  dapodikSchoolId String? // DAPODIK school mapping
  lastDapodikSync DateTime?
  metadata        Json              @default("{}")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  syncLogs SyncLog[]

  @@unique([schoolId, type])
  @@index([status])
  @@index([schoolId])
  @@map("integrations")
  @@schema("tenant")
}

model SyncLog {
  id               String     @id @default(uuid()) @db.Uuid
  integrationId    String     @db.Uuid
  operation        String
  status           SyncStatus
  recordsProcessed Int        @default(0)
  recordsFailed    Int        @default(0)
  errors           Json?
  startedAt        DateTime
  completedAt      DateTime?

  integration Integration @relation(fields: [integrationId], references: [id])

  @@index([integrationId])
  @@index([status])
  @@index([startedAt])
  @@map("sync_logs")
  @@schema("tenant")
}

// Security & Audit
model Session {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @db.Uuid
  token        String   @unique
  ipAddress    String?
  userAgent    String?
  lastActivity DateTime
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([expiresAt])
  @@map("sessions")
  @@schema("tenant")
}

model AuditLog {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String?  @db.Uuid
  action    String
  entity    String
  entityId  String?
  oldData   Json?
  newData   Json?
  ipAddress String?
  userAgent String?
  metadata  Json?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([entity, entityId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
  @@schema("tenant")
}

model EmailTemplate {
  id        String            @id @default(uuid()) @db.Uuid
  schoolId  String            @db.Uuid
  type      EmailTemplateType
  name      String // Nama template untuk admin
  subject   Json // Multilingual subject
  body      Json // HTML template multilingual
  variables String[] // Available merge variables
  isActive  Boolean           @default(true)
  isDefault Boolean           @default(false) // Use platform default

  // White label support
  useSchoolBranding Boolean @default(true)
  customHeader      String? // Custom HTML header
  customFooter      String? // Custom HTML footer
  customCSS         String? // Custom styling

  // Sending configuration
  priority  Priority @default(NORMAL)
  bccEmails String[] @default([])
  replyTo   String?

  createdBy String   @db.Uuid
  updatedBy String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, type])
  @@index([isActive])
  @@index([type])
  @@map("email_templates")
  @@schema("tenant")
}

// Email sending log untuk tracking
model EmailLog {
  id             String            @id @default(uuid()) @db.Uuid
  templateId     String?           @db.Uuid
  templateType   EmailTemplateType
  recipientId    String            @db.Uuid // User ID
  recipientEmail String
  subject        String
  status         EmailStatus       @default(PENDING)
  sentAt         DateTime?
  openedAt       DateTime?
  clickedAt      DateTime?
  errorMessage   String?
  metadata       Json              @default("{}")
  createdAt      DateTime          @default(now())

  @@index([recipientId])
  @@index([status])
  @@index([templateType])
  @@index([createdAt])
  @@map("email_logs")
  @@schema("tenant")
}

// === ACADEMIC TRANSLATIONS ===
model SubjectTranslation {
  id          String   @id @default(uuid()) @db.Uuid
  subjectId   String   @db.Uuid
  language    Language
  name        String
  description String?

  subject Subject @relation(fields: [subjectId], references: [id])

  @@unique([subjectId, language])
  @@map("subject_translations")
  @@schema("tenant")
}

model GradeTranslation {
  id       String   @id @default(uuid()) @db.Uuid
  gradeId  String   @db.Uuid
  language Language
  name     String

  grade Grade @relation(fields: [gradeId], references: [id])

  @@unique([gradeId, language])
  @@map("grade_translations")
  @@schema("tenant")
}

model AnnouncementTranslation {
  id             String   @id @default(uuid()) @db.Uuid
  announcementId String   @db.Uuid
  language       Language
  title          String
  content        String

  announcement Announcement @relation(fields: [announcementId], references: [id])

  @@unique([announcementId, language])
  @@map("announcement_translations")
  @@schema("tenant")
}

// ==================== ENUMS ====================

// ✅ NEW: Parent Portal Related Enums
enum DigestFrequency {
  DAILY
  WEEKLY
  MONTHLY
  NEVER

  @@schema("tenant")
}

enum MessageCategory {
  ACADEMIC
  BEHAVIOR
  HEALTH
  ADMINISTRATIVE
  OTHER

  @@schema("tenant")
}

enum MessageStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED

  @@schema("tenant")
}

enum ConsentType {
  PHOTO_SHARING
  FIELD_TRIP
  MEDICAL_TREATMENT
  DATA_SHARING
  SPECIAL_PROGRAM

  @@schema("tenant")
}

enum NotificationCategory {
  ATTENDANCE
  ACADEMIC_PERFORMANCE
  ACADEMIC_SUBMISSION
  BEHAVIOR_DISCIPLINE
  HEALTH_SAFETY
  PAYMENT_FINANCE
  ACTIVITY_UPDATE
  COMMUNICATION
  EVENT_ANNOUNCEMENT

  @@schema("tenant")
}

enum NotificationChannel {
  PUSH_NOTIFICATION
  EMAIL
  SMS
  WHATSAPP
  IN_APP

  @@schema("tenant")
}

enum NotificationTiming {
  IMMEDIATE
  DAILY
  WEEKLY
  MONTHLY

  @@schema("tenant")
}

// New Payment-Related Enums
enum PaymentType {
  FULL // Bayar tunai/sekaligus
  INSTALLMENT // Bayar cicilan

  @@schema("tenant")
}

enum FeeAssignmentStatus {
  PENDING // Belum ada pembayaran
  PARTIAL // Sebagian sudah dibayar
  PAID // Lunas
  OVERDUE // Terlambat
  CANCELLED // Dibatalkan

  @@schema("tenant")
}

enum InstallmentStatus {
  PENDING // Belum dibayar
  PARTIAL // Sebagian dibayar
  PAID // Lunas
  OVERDUE // Terlambat
  WAIVED // Dibebaskan

  @@schema("tenant")
}

enum ReminderType {
  BEFORE_DUE // Sebelum jatuh tempo
  OVERDUE // Sudah terlambat
  FINAL_NOTICE // Peringatan terakhir

  @@schema("tenant")
}

enum ReminderStatus {
  PENDING // Belum dikirim
  SENT // Sudah dikirim
  FAILED // Gagal kirim

  @@schema("tenant")
}

enum NotificationMethod {
  EMAIL
  SMS
  WHATSAPP
  PUSH_NOTIFICATION

  @@schema("tenant")
}

enum PublishStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  ARCHIVED
  EXPIRED

  @@schema("tenant")
}

// Base Status enum (shared across schemas)
enum BaseStatus {
  ACTIVE
  INACTIVE

  @@schema("public")
}

enum PlatformStatus {
  ACTIVE
  MAINTENANCE
  SUSPENDED

  @@schema("public")
}

enum TenantStatus {
  ACTIVE
  SUSPENDED
  TERMINATED

  @@schema("public")
}

enum SchoolStatus {
  ACTIVE
  INACTIVE
  SUSPENDED

  @@schema("public")
}

enum SchoolType {
  TK
  SD
  SMP
  SMA
  INTEGRATED

  @@schema("public")
}

enum SchoolLevel {
  KB // ✅ NEW: Kelompok Bermain / Playgroup
  TK
  SD
  SMP
  SMA

  @@schema("public")
}

enum LanguageStatus {
  ACTIVE
  INACTIVE
  DEPRECATED

  @@schema("public")
}

enum SubscriptionStatus {
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID

  @@schema("public")
}

enum BillingPeriod {
  MONTHLY
  QUARTERLY
  SEMESTER
  YEARLY

  @@schema("public")
}

enum InvoiceStatus {
  DRAFT
  PENDING
  PAID
  OVERDUE
  VOID

  @@schema("public")
}

enum TenantRole {
  OWNER
  ADMIN
  FINANCE
  SUPPORT

  @@schema("public")
}

// White Label Enums
enum WhiteLabelStatus {
  ACTIVE
  PENDING_VERIFICATION // Menunggu verifikasi domain
  SUSPENDED
  CANCELLED

  @@schema("public")
}

enum VerificationMethod {
  DNS_TXT // Verifikasi via DNS TXT record
  DNS_CNAME // Verifikasi via DNS CNAME
  FILE_UPLOAD // Verifikasi via file upload ke domain

  @@schema("public")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  LOCKED

  @@schema("tenant")
}

enum UserRole {
  ADMIN
  PRINCIPAL
  VICE_PRINCIPAL
  TEACHER
  STAFF
  STUDENT
  PARENT

  @@schema("tenant")
}

enum Gender {
  MALE
  FEMALE

  @@schema("tenant")
}

enum StudentStatus {
  ACTIVE
  GRADUATED
  TRANSFERRED
  DROPPED
  SUSPENDED

  @@schema("tenant")
}

enum ParentRelationship {
  FATHER
  MOTHER
  GUARDIAN
  OTHER

  @@schema("tenant")
}

enum EmploymentType {
  PERMANENT
  CONTRACT
  PART_TIME
  VOLUNTEER

  @@schema("tenant")
}

enum TeacherStatus {
  ACTIVE
  ON_LEAVE
  RESIGNED
  RETIRED

  @@schema("tenant")
}

enum StaffStatus {
  ACTIVE
  ON_LEAVE
  RESIGNED
  RETIRED

  @@schema("tenant")
}

enum CurriculumType {
  KURIKULUM_MERDEKA
  KTSP
  CAMBRIDGE
  IB
  CUSTOM

  @@schema("tenant")
}

enum SubjectCategory {
  CORE
  ELECTIVE
  LOCAL_CONTENT
  EXTRACURRICULAR

  @@schema("tenant")
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  WITHDRAWN
  TRANSFERRED

  @@schema("tenant")
}

// ✅ Enhanced promotion tracking
enum PromotionType {
  REGULAR // Normal naik kelas
  ACCELERATED // Loncat kelas / akselerasi
  RETAINED // Tinggal kelas
  CONDITIONAL // Naik kelas bersyarat

  @@schema("tenant")
}

enum RecordStatus {
  DRAFT
  SUBMITTED
  APPROVED
  PUBLISHED

  @@schema("tenant")
}

enum AssessmentType {
  QUIZ
  ASSIGNMENT
  MID_TERM
  FINAL_EXAM
  PROJECT
  PRACTICAL

  @@schema("tenant")
}

enum AssessmentStatus {
  DRAFT
  PUBLISHED
  ONGOING
  COMPLETED
  ARCHIVED

  @@schema("tenant")
}

enum SubmissionStatus {
  PENDING
  SUBMITTED
  LATE
  GRADED
  RETURNED

  @@schema("tenant")
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
  SICK
  HOLIDAY

  @@schema("tenant")
}

enum LeaveType {
  SICK
  PERSONAL
  MATERNITY
  PATERNITY
  STUDY
  OTHER

  @@schema("tenant")
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED

  @@schema("tenant")
}

enum RoomType {
  CLASSROOM
  LAB
  LIBRARY
  OFFICE
  HALL
  OTHER

  @@schema("tenant")
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE

  @@schema("tenant")
}

enum FeeType {
  TUITION
  REGISTRATION
  ADMISSION
  EXAM
  ACTIVITY
  UNIFORM
  BOOK
  OTHER

  @@schema("tenant")
}

enum FeeFrequency {
  ONE_TIME
  MONTHLY
  QUARTERLY
  SEMESTER
  YEARLY

  @@schema("tenant")
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  GOPAY
  OVO
  DANA
  CREDIT_CARD
  OTHER

  @@schema("tenant")
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
  REFUNDED

  @@schema("tenant")
}

enum ReportCardType {
  ACADEMIC
  CHARACTER
  P5
  CUSTOM

  @@schema("tenant")
}

enum ReportCardStatus {
  DRAFT
  REVIEW
  APPROVED
  PUBLISHED

  @@schema("tenant")
}

enum DisciplineType {
  WARNING
  DETENTION
  SUSPENSION
  COUNSELING
  OTHER

  @@schema("tenant")
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL

  @@schema("tenant")
}

enum AchievementType {
  ACADEMIC
  SPORTS
  ARTS
  LEADERSHIP
  COMMUNITY
  OTHER

  @@schema("tenant")
}

enum AnnouncementType {
  GENERAL
  ACADEMIC
  EVENT
  EMERGENCY
  HOLIDAY

  @@schema("tenant")
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT

  @@schema("tenant")
}

enum ConversationType {
  DIRECT
  GROUP
  BROADCAST

  @@schema("tenant")
}

enum NotificationType {
  SYSTEM
  ACADEMIC
  ATTENDANCE
  PAYMENT
  MESSAGE
  ANNOUNCEMENT

  @@schema("tenant")
}

enum IntegrationType {
  LMS_GOOGLE
  LMS_TEAMS
  LMS_MOODLE
  PAYMENT_GATEWAY
  SMS_GATEWAY
  EMAIL_PROVIDER
  GOVERNMENT_API

  @@schema("tenant")
}

enum IntegrationStatus {
  ACTIVE
  INACTIVE
  ERROR

  @@schema("tenant")
}

enum SyncStatus {
  SUCCESS
  PARTIAL
  FAILED

  @@schema("tenant")
}

enum Language {
  EN
  ID
  ZH

  @@schema("public")
}

// Email Template Types
enum EmailTemplateType {
  // === AUTHENTICATION & ACCOUNT ===
  WELCOME // Welcome email untuk user baru
  EMAIL_VERIFICATION // Verifikasi email
  PASSWORD_RESET // Reset password
  PASSWORD_CHANGED // Notifikasi password berubah
  TWO_FACTOR_CODE // Kode 2FA
  ACCOUNT_LOCKED // Akun terkunci
  ACCOUNT_REACTIVATED // Akun diaktifkan kembali

  // === ENROLLMENT & ADMISSION ===
  ENROLLMENT_CONFIRMATION // Konfirmasi pendaftaran siswa
  ENROLLMENT_ACCEPTED // Diterima di sekolah
  ENROLLMENT_REJECTED // Ditolak pendaftaran
  ENROLLMENT_WAITLIST // Masuk waiting list
  CLASS_ASSIGNMENT // Penempatan kelas
  GRADE_PROMOTION // Naik kelas
  GRADE_RETENTION // Tinggal kelas
  TRANSFER_CONFIRMATION // Konfirmasi pindah sekolah

  // === ACADEMIC NOTIFICATIONS ===
  REPORT_CARD_READY // Rapor siap diunduh
  ASSESSMENT_PUBLISHED // Ujian/tugas dipublish
  ASSESSMENT_REMINDER // Pengingat ujian/tugas
  ASSESSMENT_RESULT // Hasil ujian/nilai
  HOMEWORK_ASSIGNED // PR baru
  HOMEWORK_REMINDER // Pengingat PR
  ACADEMIC_WARNING // Peringatan akademik
  ACHIEVEMENT_NOTIFICATION // Notifikasi prestasi

  // === ATTENDANCE ===
  ATTENDANCE_ABSENT // Siswa tidak hadir
  ATTENDANCE_LATE // Siswa terlambat
  ATTENDANCE_SUMMARY_WEEKLY // Ringkasan mingguan
  ATTENDANCE_SUMMARY_MONTHLY // Ringkasan bulanan
  ATTENDANCE_WARNING // Peringatan absensi

  // === PAYMENT & BILLING ===
  INVOICE_CREATED // Invoice baru
  PAYMENT_REMINDER // Pengingat pembayaran
  PAYMENT_OVERDUE // Pembayaran terlambat
  PAYMENT_RECEIVED // Konfirmasi pembayaran
  PAYMENT_RECEIPT // Kwitansi pembayaran
  INSTALLMENT_REMINDER // Pengingat cicilan
  INSTALLMENT_SCHEDULE // Jadwal cicilan
  PAYMENT_FAILED // Pembayaran gagal
  REFUND_PROCESSED // Refund diproses

  // === COMMUNICATION ===
  ANNOUNCEMENT_GENERAL // Pengumuman umum
  ANNOUNCEMENT_URGENT // Pengumuman penting/darurat
  EVENT_INVITATION // Undangan acara
  EVENT_REMINDER // Pengingat acara
  MEETING_INVITATION // Undangan rapat
  MEETING_REMINDER // Pengingat rapat
  MEETING_CANCELLATION // Pembatalan rapat
  MESSAGE_NOTIFICATION // Notifikasi pesan baru

  // === DISCIPLINE & BEHAVIOR ===
  DISCIPLINE_WARNING // Peringatan disiplin
  DISCIPLINE_ACTION // Tindakan disiplin
  BEHAVIOR_REPORT // Laporan perilaku
  COUNSELING_APPOINTMENT // Jadwal konseling
  PARENT_CONFERENCE_REQUEST // Permintaan pertemuan orangtua

  // === LEAVE & PERMISSION ===
  LEAVE_REQUEST_SUBMITTED // Pengajuan cuti (guru/staff)
  LEAVE_REQUEST_APPROVED // Cuti disetujui
  LEAVE_REQUEST_REJECTED // Cuti ditolak
  STUDENT_LEAVE_NOTIFICATION // Notifikasi izin siswa

  // === SCHEDULE & TIMETABLE ===
  SCHEDULE_CHANGE // Perubahan jadwal
  SCHEDULE_PUBLISHED // Jadwal baru dipublish
  CLASS_CANCELLATION // Pembatalan kelas
  SUBSTITUTE_TEACHER // Info guru pengganti

  // === WHITE LABEL SPECIFIC ===
  DOMAIN_VERIFICATION // Verifikasi domain custom
  DOMAIN_VERIFIED // Domain terverifikasi
  SSL_EXPIRY_WARNING // Peringatan SSL akan expired
  WHITE_LABEL_ACTIVATED // White label diaktifkan
  WHITE_LABEL_SUSPENDED // White label disuspend

  // === PARENT PORTAL SPECIFIC ===
  DAILY_ACTIVITY_SUMMARY // Rangkuman aktivitas harian (KB/TK)
  WEEKLY_PROGRESS_REPORT // Laporan perkembangan mingguan
  PHOTO_ALBUM_SHARED // Album foto dibagikan
  MEAL_UPDATE // Update makan anak
  NAP_TIME_UPDATE // Update tidur siang
  HEALTH_CHECK_RESULT // Hasil pemeriksaan kesehatan
  MILESTONE_ACHIEVED // Pencapaian milestone perkembangan

  // === SYSTEM & MAINTENANCE ===
  SYSTEM_MAINTENANCE // Notifikasi maintenance
  SYSTEM_UPDATE // Update sistem
  DATA_EXPORT_READY // Export data selesai
  BACKUP_COMPLETED // Backup selesai
  API_LIMIT_WARNING // Peringatan API limit
  SUBSCRIPTION_EXPIRING // Subscription akan habis
  SUBSCRIPTION_RENEWED // Subscription diperpanjang

  // === CUSTOM TEMPLATES ===
  CUSTOM_TEMPLATE_1 // Template custom 1
  CUSTOM_TEMPLATE_2 // Template custom 2
  CUSTOM_TEMPLATE_3 // Template custom 3
  CUSTOM_TEMPLATE_4 // Template custom 4
  CUSTOM_TEMPLATE_5 // Template custom 5

  @@schema("tenant")
}

enum EmailStatus {
  PENDING // Menunggu dikirim
  QUEUED // Dalam antrian
  SENT // Terkirim
  DELIVERED // Diterima
  OPENED // Dibuka
  CLICKED // Link diklik
  BOUNCED // Gagal terkirim
  FAILED // Error

  @@schema("tenant")
}
