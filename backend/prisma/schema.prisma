// Educational Management Platform - Enhanced Prisma Schema
// Robust multi-tenant architecture with comprehensive academic & financial features
// Version: 2.0

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "postgresqlExtensions", "fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "tenant", "shared"]
}

model Notification {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid

  // Notification details
  type     NotificationType
  category NotificationCategory
  title    String
  content  String

  // Language tracking
  language String @default("id")

  // Priority & timing
  priority     Priority  @default(NORMAL)
  scheduledFor DateTime?

  // Additional data
  data      Json?
  actionUrl String?

  // Status
  readAt      DateTime?
  clickedAt   DateTime?
  dismissedAt DateTime?

  // Delivery
  deliveredAt     DateTime?
  deliveryChannel NotificationChannel?

  // Grouping
  groupId String? // For batching similar notifications

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId, readAt])
  @@index([type])
  @@index([category])
  @@index([createdAt])
  @@index([priority])
  @@index([groupId])
  @@map("notifications")
  @@schema("tenant")
}

model NotificationSetting {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid

  // Category settings
  category NotificationCategory
  enabled  Boolean               @default(true)
  channels NotificationChannel[]

  // Timing
  timing NotificationTiming @default(IMMEDIATE)

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, category])
  @@map("notification_settings")
  @@schema("tenant")
}

// Template Management
model NotificationTemplate {
  id       String @id @default(uuid()) @db.Uuid
  schoolId String @db.Uuid

  // Template info
  category    NotificationCategory
  channel     NotificationChannel
  schoolLevel SchoolLevel?

  // Content templates
  titleTemplate   Json // Multilingual with variables
  contentTemplate Json // Multilingual with variables

  // Rich content
  supportsImages  Boolean @default(false)
  supportsButtons Boolean @default(false)
  buttonTemplate  Json?

  // Variables
  variables         String[]
  requiredVariables String[]

  // Status
  isActive  Boolean @default(true)
  isDefault Boolean @default(false)

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, category, channel, schoolLevel])
  @@index([category])
  @@index([schoolLevel])
  @@index([isActive])
  @@map("notification_templates")
  @@schema("tenant")
}

model EmailTemplate {
  id       String @id @default(uuid()) @db.Uuid
  schoolId String @db.Uuid

  // Template info
  type     EmailTemplateType
  name     String
  category TemplateCategory  @default(GENERAL)

  // Content
  subject Json // Multilingual
  body    Json // HTML template multilingual

  // Template settings
  variables         String[]
  requiredVariables String[]

  // Parent-specific
  parentFriendly   Boolean @default(false)
  includePayButton Boolean @default(false)

  // White label
  useSchoolBranding Boolean @default(true)
  customHeader      String?
  customFooter      String?
  customCSS         String?

  // Email settings
  priority  Priority @default(NORMAL)
  bccEmails String[] @default([])
  replyTo   String?

  // Status
  isActive  Boolean @default(true)
  isDefault Boolean @default(false)

  // Audit
  createdBy String  @db.Uuid
  updatedBy String? @db.Uuid

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, type])
  @@index([isActive])
  @@index([type])
  @@index([category])
  @@map("email_templates")
  @@schema("tenant")
}

model EmailLog {
  id           String            @id @default(uuid()) @db.Uuid
  templateId   String?           @db.Uuid
  templateType EmailTemplateType

  // Recipient
  recipientId    String  @db.Uuid
  recipientEmail String
  recipientName  String?

  // Content
  subject  String
  language String @default("id")

  // Status
  status EmailStatus @default(PENDING)

  // Delivery tracking
  sentAt      DateTime?
  deliveredAt DateTime?
  openedAt    DateTime?
  clickedAt   DateTime?
  bouncedAt   DateTime?

  // Error handling
  errorMessage String?
  errorCode    String?
  retryCount   Int     @default(0)

  // Provider info
  provider  String?
  messageId String? @unique

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())

  @@index([recipientId])
  @@index([status])
  @@index([templateType])
  @@index([createdAt])
  @@index([messageId])
  @@map("email_logs")
  @@schema("tenant")
}

// Academic Support
model LessonPlan {
  id        String @id @default(uuid()) @db.Uuid
  teacherId String @db.Uuid
  subjectId String @db.Uuid
  classId   String @db.Uuid

  // Plan details
  title    String
  date     DateTime
  duration Int // Minutes

  // Objectives
  objectives   String[]
  competencies String[] // Competency IDs

  // Content
  introduction   String?
  mainActivities Json
  conclusion     String?

  // Resources
  materials String[]
  resources Json?

  // Assessment
  assessmentPlan String?
  homework       String?

  // Reflection
  reflection   String?
  improvements String?

  // Status
  status LessonPlanStatus @default(DRAFT)

  // Sharing
  isShared   Boolean  @default(false)
  sharedWith String[] @default([])

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacher Teacher @relation(fields: [teacherId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])
  class   Class   @relation(fields: [classId], references: [id])

  @@index([teacherId])
  @@index([subjectId])
  @@index([classId])
  @@index([date])
  @@index([status])
  @@map("lesson_plans")
  @@schema("tenant")
}

model ClassActivity {
  id      String @id @default(uuid()) @db.Uuid
  classId String @db.Uuid

  // Activity info
  title       String
  description String?
  date        DateTime
  type        String // field_trip, project, presentation, etc.

  // Participants
  leadTeacherId       String   @db.Uuid
  assistingTeachers   String[] @default([])
  studentParticipants String[] @default([])

  // Documentation
  photos Json?
  report String?

  // Status
  status ActivityStatus @default(PLANNED)

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  class Class @relation(fields: [classId], references: [id])

  @@index([classId])
  @@index([date])
  @@index([status])
  @@map("class_activities")
  @@schema("tenant")
}

// Events & Calendar
model AcademicEvent {
  id             String @id @default(uuid()) @db.Uuid
  academicYearId String @db.Uuid

  // Event details
  name        String
  description String?
  type        EventType

  // Schedule
  startDate DateTime
  endDate   DateTime
  allDay    Boolean  @default(false)

  // Recurrence
  isRecurring    Boolean @default(false)
  recurrenceRule String?

  // Participants
  targetAudience String[]
  targetGrades   String[] @default([])
  targetClasses  String[] @default([])

  // Location
  location   String?
  isOnline   Boolean @default(false)
  onlineLink String?

  // Status
  status EventStatus @default(CONFIRMED)

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicYear AcademicYear @relation(fields: [academicYearId], references: [id])

  @@index([academicYearId])
  @@index([type])
  @@index([startDate])
  @@index([status])
  @@map("academic_events")
  @@schema("tenant")
}

// Performance Management
model PerformanceReview {
  id        String  @id @default(uuid()) @db.Uuid
  teacherId String? @db.Uuid
  staffId   String? @db.Uuid

  // Review period
  reviewPeriod String // "2024-Q1", "2024-Annual"
  startDate    DateTime
  endDate      DateTime

  // Ratings
  overallRating Float @db.Real
  ratings       Json // Category-wise ratings

  // Comments
  strengths    String?
  improvements String?
  goals        String?

  // Reviewer
  reviewerId String   @db.Uuid
  reviewDate DateTime

  // Employee feedback
  employeeFeedback String?
  employeeSignDate DateTime?

  // Status
  status ReviewStatus @default(DRAFT)

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacher Teacher? @relation(fields: [teacherId], references: [id])
  staff   Staff?   @relation(fields: [staffId], references: [id])

  @@index([teacherId])
  @@index([staffId])
  @@index([reviewPeriod])
  @@index([status])
  @@map("performance_reviews")
  @@schema("tenant")
}

// Maintenance & Assets
model MaintenanceLog {
  id         String  @id @default(uuid()) @db.Uuid
  buildingId String? @db.Uuid
  roomId     String? @db.Uuid

  // Maintenance details
  type        MaintenanceType
  description String
  priority    Priority        @default(NORMAL)

  // Schedule
  scheduledDate DateTime?
  completedDate DateTime?

  // Work details
  workPerformed String?
  partsReplaced Json?
  cost          Decimal? @db.Decimal(12, 2)

  // Contractor
  performedBy    String?
  contractorName String?

  // Status
  status MaintenanceStatus @default(PENDING)

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  building Building? @relation(fields: [buildingId], references: [id])
  room     Room?     @relation(fields: [roomId], references: [id])

  @@index([buildingId])
  @@index([roomId])
  @@index([status])
  @@index([scheduledDate])
  @@map("maintenance_logs")
  @@schema("tenant")
}

// Integration & External Systems
model Integration {
  id       String          @id @default(uuid()) @db.Uuid
  schoolId String          @db.Uuid
  type     IntegrationType
  name     String

  // Configuration
  config      Json // Encrypted
  credentials Json // Encrypted

  // External mapping
  externalSystemId String?
  mappings         Json    @default("{}")

  // Status
  status         IntegrationStatus @default(INACTIVE)
  lastSyncAt     DateTime?
  lastSyncStatus String?
  lastError      String?

  // Sync settings
  syncEnabled   Boolean @default(true)
  syncFrequency String  @default("DAILY")
  syncFilters   Json?

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  syncLogs SyncLog[]

  @@unique([schoolId, type])
  @@index([status])
  @@index([schoolId])
  @@map("integrations")
  @@schema("tenant")
}

model SyncLog {
  id            String @id @default(uuid()) @db.Uuid
  integrationId String @db.Uuid

  // Sync details
  operation String
  direction String // IMPORT, EXPORT, BIDIRECTIONAL

  // Status
  status SyncStatus

  // Metrics
  recordsProcessed Int @default(0)
  recordsCreated   Int @default(0)
  recordsUpdated   Int @default(0)
  recordsSkipped   Int @default(0)
  recordsFailed    Int @default(0)

  // Timing
  startedAt   DateTime
  completedAt DateTime?
  duration    Int? // Seconds

  // Errors
  errors   Json?
  warnings Json?

  // Metadata
  metadata Json?

  integration Integration @relation(fields: [integrationId], references: [id])

  @@index([integrationId])
  @@index([status])
  @@index([startedAt])
  @@map("sync_logs")
  @@schema("tenant")
}

// Security & Audit
model Session {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid
  token  String @unique

  // Session info
  ipAddress  String?
  userAgent  String?
  deviceId   String?
  deviceType String? // mobile, desktop, tablet

  // Activity
  lastActivity DateTime

  // Expiry
  expiresAt DateTime

  // Metadata
  metadata  Json?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([expiresAt])
  @@index([token])
  @@map("sessions")
  @@schema("tenant")
}

model LoginHistory {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid

  // Login details
  loginAt   DateTime @default(now())
  loginIp   String
  userAgent String?
  deviceId  String?

  // Location
  country String?
  city    String?

  // Status
  success       Boolean
  failureReason String?

  // Metadata
  metadata Json?

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([loginAt])
  @@map("login_history")
  @@schema("tenant")
}

model AuditLog {
  id     String  @id @default(uuid()) @db.Uuid
  userId String? @db.Uuid

  // Action details
  action   String
  entity   String
  entityId String?
  category AuditCategory @default(GENERAL)

  // Context
  schoolId  String? @db.Uuid
  studentId String? @db.Uuid

  // Financial context
  amount   Decimal? @db.Decimal(12, 2)
  currency String?  @db.VarChar(3)

  // Change tracking
  oldData Json?
  newData Json?

  // Request info
  ipAddress String?
  userAgent String?

  // Additional context
  metadata Json?
  tags     String[] @default([])

  // Timestamp
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([entity, entityId])
  @@index([action])
  @@index([category])
  @@index([createdAt])
  @@index([schoolId])
  @@map("audit_logs")
  @@schema("tenant")
}

// Analytics
model StudentBillingAnalytics {
  id        String @id @default(uuid()) @db.Uuid
  studentId String @unique @db.Uuid

  // Payment behavior
  totalBilled Decimal @default(0) @db.Decimal(12, 2)
  totalPaid   Decimal @default(0) @db.Decimal(12, 2)
  totalWaived Decimal @default(0) @db.Decimal(12, 2)

  // Payment patterns
  onTimePayments Int    @default(0)
  latePayments   Int    @default(0)
  avgDaysLate    Float? @db.Real

  // Current status
  hasOutstanding    Boolean   @default(false)
  outstandingAmount Decimal   @default(0) @db.Decimal(12, 2)
  oldestDueDate     DateTime?
  daysOverdue       Int       @default(0)

  // Risk scoring
  paymentRiskScore Float @default(0) @db.Real // 0-100
  riskFactors      Json? // Detailed risk factors

  // Last calculation
  lastCalculated DateTime @default(now())

  @@index([hasOutstanding])
  @@index([paymentRiskScore])
  @@map("student_billing_analytics")
  @@schema("tenant")
}

// Language History
model UserLanguageHistory {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid

  // Language change
  fromLanguage String?
  toLanguage   String

  // Change info
  changedBy     String   @db.Uuid
  changedReason String?
  changedAt     DateTime @default(now())

  // Context
  ipAddress String?
  userAgent String?

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([changedAt])
  @@map("user_language_history")
  @@schema("tenant")
}

// Translation Tables
model SubjectTranslation {
  id          String   @id @default(uuid()) @db.Uuid
  subjectId   String   @db.Uuid
  language    Language
  name        String
  description String?

  subject Subject @relation(fields: [subjectId], references: [id])

  @@unique([subjectId, language])
  @@map("subject_translations")
  @@schema("tenant")
}

model GradeTranslation {
  id       String   @id @default(uuid()) @db.Uuid
  gradeId  String   @db.Uuid
  language Language
  name     String

  grade Grade @relation(fields: [gradeId], references: [id])

  @@unique([gradeId, language])
  @@map("grade_translations")
  @@schema("tenant")
}

model AnnouncementTranslation {
  id             String   @id @default(uuid()) @db.Uuid
  announcementId String   @db.Uuid
  language       Language
  title          String
  content        String

  announcement Announcement @relation(fields: [announcementId], references: [id])

  @@unique([announcementId, language])
  @@map("announcement_translations")
  @@schema("tenant")
}

// ==================== ENUMS ====================

// Platform Level Enums
enum PlatformStatus {
  ACTIVE
  MAINTENANCE
  SUSPENDED

  @@schema("public")
}

enum TenantStatus {
  ACTIVE
  SUSPENDED
  TERMINATED

  @@schema("public")
}

enum TenantType {
  FOUNDATION // Multi-school foundation
  SINGLE_SCHOOL // Single school

  @@schema("public")
}

enum SchoolStatus {
  ACTIVE
  INACTIVE
  SUSPENDED

  @@schema("public")
}

enum SchoolType {
  TK
  SD
  SMP
  SMA
  INTEGRATED

  @@schema("public")
}

enum SchoolLevel {
  KB // Kelompok Bermain / Playgroup
  TK
  SD
  SMP
  SMA

  @@schema("public")
}

enum BaseStatus {
  ACTIVE
  INACTIVE

  @@schema("public")
}

enum LanguageStatus {
  ACTIVE
  INACTIVE
  DEPRECATED

  @@schema("public")
}

enum TenantRole {
  OWNER
  ADMIN
  FINANCE
  SUPPORT
  VIEWER

  @@schema("public")
}

enum SubscriptionType {
  PER_STUDENT
  FLAT_RATE
  CUSTOM

  @@schema("public")
}

enum SubscriptionStatus {
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
  PAUSED

  @@schema("public")
}

enum BillingCycle {
  MONTHLY
  QUARTERLY
  SEMESTER
  YEARLY

  @@schema("public")
}

enum InvoiceType {
  SUBSCRIPTION
  ADDON
  ONE_TIME
  CREDIT

  @@schema("public")
}

enum InvoiceStatus {
  DRAFT
  PENDING
  PAID
  OVERDUE
  VOID
  REFUNDED

  @@schema("public")
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
  REFUNDED
  CANCELLED
  EXPIRED

  @@schema("public")
}

enum LineItemType {
  STUDENT_LICENSE
  VOLUME_DISCOUNT
  LANGUAGE_ADDON
  WHITE_LABEL_FEE
  CUSTOM_DOMAIN
  SETUP_FEE
  SUPPORT_FEE
  STORAGE_FEE
  API_USAGE
  OTHER_FEE
  TAX

  @@schema("public")
}

enum AlertType {
  PAYMENT_DUE
  PAYMENT_OVERDUE
  INVOICE_GENERATED
  PAYMENT_RECEIVED
  SUBSCRIPTION_EXPIRY
  PRICE_CHANGE
  STUDENT_LIMIT
  USAGE_LIMIT
  SYSTEM_MAINTENANCE

  @@schema("public")
}

enum AlertSeverity {
  INFO
  WARNING
  ERROR
  CRITICAL

  @@schema("public")
}

enum PriceChangeType {
  RATE_CHANGE
  DISCOUNT_ADDED
  DISCOUNT_REMOVED
  PLAN_UPGRADE
  PLAN_DOWNGRADE
  CUSTOM_PRICING

  @@schema("public")
}

enum WhiteLabelTier {
  BASIC
  PREMIUM
  ENTERPRISE

  @@schema("public")
}

enum WhiteLabelStatus {
  ACTIVE
  PENDING_VERIFICATION
  SUSPENDED
  CANCELLED

  @@schema("public")
}

enum VerificationMethod {
  DNS_TXT
  DNS_CNAME
  FILE_UPLOAD
  META_TAG

  @@schema("public")
}

enum IntegrationType {
  LMS_GOOGLE
  LMS_TEAMS
  LMS_MOODLE
  PAYMENT_GATEWAY
  SMS_GATEWAY
  EMAIL_PROVIDER
  WHATSAPP_BUSINESS
  GOVERNMENT_API
  ACCOUNTING_SYSTEM
  HR_SYSTEM

  @@schema("public")
}

enum IntegrationStatus {
  ACTIVE
  INACTIVE
  ERROR
  MAINTENANCE

  @@schema("public")
}

enum AddonStatus {
  ACTIVE
  CANCELLED
  EXPIRED

  @@schema("public")
}

enum AuditSeverity {
  INFO
  WARNING
  ERROR
  CRITICAL

  @@schema("public")
}

enum Language {
  EN
  ID
  ZH
  AR
  ES
  FR
  HI
  JA
  KO
  PT

  @@schema("public")
}

// Tenant Level Enums
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  LOCKED

  @@schema("tenant")
}

enum UserRole {
  ADMIN
  PRINCIPAL
  VICE_PRINCIPAL
  TEACHER
  STAFF
  STUDENT
  PARENT
  COUNSELOR
  LIBRARIAN

  @@schema("tenant")
}

enum Gender {
  MALE
  FEMALE

  @@schema("tenant")
}

enum StudentStatus {
  ACTIVE
  GRADUATED
  TRANSFERRED
  DROPPED
  SUSPENDED
  ALUMNI

  @@schema("tenant")
}

enum ParentRelationship {
  FATHER
  MOTHER
  GUARDIAN
  GRANDFATHER
  GRANDMOTHER
  OTHER

  @@schema("tenant")
}

enum EmploymentType {
  PERMANENT
  CONTRACT
  PART_TIME
  VOLUNTEER
  INTERN

  @@schema("tenant")
}

enum TeacherStatus {
  ACTIVE
  ON_LEAVE
  RESIGNED
  RETIRED
  TERMINATED

  @@schema("tenant")
}

enum StaffStatus {
  ACTIVE
  ON_LEAVE
  RESIGNED
  RETIRED
  TERMINATED

  @@schema("tenant")
}

enum CurriculumType {
  KURIKULUM_MERDEKA
  KTSP
  CAMBRIDGE
  IB
  CUSTOM

  @@schema("tenant")
}

enum CompetencyType {
  KNOWLEDGE
  SKILL
  ATTITUDE

  @@schema("tenant")
}

enum SubjectCategory {
  CORE
  ELECTIVE
  LOCAL_CONTENT
  EXTRACURRICULAR

  @@schema("tenant")
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  WITHDRAWN
  TRANSFERRED
  SUSPENDED

  @@schema("tenant")
}

enum PromotionType {
  REGULAR
  ACCELERATED
  RETAINED
  CONDITIONAL

  @@schema("tenant")
}

enum RecordStatus {
  DRAFT
  SUBMITTED
  APPROVED
  PUBLISHED
  ARCHIVED

  @@schema("tenant")
}

enum AssessmentType {
  QUIZ
  ASSIGNMENT
  MID_TERM
  FINAL_EXAM
  PROJECT
  PRACTICAL
  PRESENTATION

  @@schema("tenant")
}

enum AssessmentStatus {
  DRAFT
  PUBLISHED
  ONGOING
  COMPLETED
  ARCHIVED
  CANCELLED

  @@schema("tenant")
}

enum SubmissionStatus {
  PENDING
  SUBMITTED
  LATE
  GRADED
  RETURNED
  MISSING

  @@schema("tenant")
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
  SICK
  HOLIDAY
  PERMISSION

  @@schema("tenant")
}

enum LeaveType {
  SICK
  PERSONAL
  MATERNITY
  PATERNITY
  STUDY
  EMERGENCY
  OTHER

  @@schema("tenant")
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED

  @@schema("tenant")
}

enum RoomType {
  CLASSROOM
  LAB
  LIBRARY
  OFFICE
  HALL
  CAFETERIA
  PLAYGROUND
  OTHER

  @@schema("tenant")
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  RESERVED

  @@schema("tenant")
}

enum BookingStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED

  @@schema("tenant")
}

enum FeeType {
  TUITION
  REGISTRATION
  ADMISSION
  EXAM
  ACTIVITY
  UNIFORM
  BOOK
  TRANSPORT
  MEAL
  BOARDING
  OTHER

  @@schema("tenant")
}

enum FeeFrequency {
  ONE_TIME
  MONTHLY
  QUARTERLY
  SEMESTER
  YEARLY

  @@schema("tenant")
}

enum PaymentType {
  FULL
  INSTALLMENT

  @@schema("tenant")
}

enum FeeAssignmentStatus {
  PENDING
  PARTIAL
  PAID
  OVERDUE
  WAIVED
  CANCELLED

  @@schema("tenant")
}

enum InstallmentStatus {
  PENDING
  PARTIAL
  PAID
  OVERDUE
  WAIVED

  @@schema("tenant")
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  GOPAY
  OVO
  DANA
  SHOPEEPAY
  CREDIT_CARD
  DEBIT_CARD
  VIRTUAL_ACCOUNT
  OTHER

  @@schema("tenant")
}

enum RefundStatus {
  PENDING
  APPROVED
  PROCESSING
  COMPLETED
  REJECTED

  @@schema("tenant")
}

enum ReminderType {
  BEFORE_DUE
  ON_DUE_DATE
  OVERDUE
  FINAL_NOTICE

  @@schema("tenant")
}

enum ReminderStatus {
  PENDING
  SENT
  FAILED
  CANCELLED

  @@schema("tenant")
}

enum WaiverStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED

  @@schema("tenant")
}

enum ScholarshipStatus {
  ACTIVE
  SUSPENDED
  EXPIRED
  CANCELLED

  @@schema("tenant")
}

enum PaymentConsentType {
  ONLINE_PAYMENT
  AUTO_PAY
  PAYMENT_REMINDER
  INSTALLMENT

  @@schema("tenant")
}

enum ReportCardType {
  ACADEMIC
  CHARACTER
  P5
  CAMBRIDGE
  IB
  CUSTOM

  @@schema("tenant")
}

enum ReportCardStatus {
  DRAFT
  REVIEW
  APPROVED
  PUBLISHED
  ARCHIVED

  @@schema("tenant")
}

enum DisciplineType {
  WARNING
  DETENTION
  SUSPENSION
  COUNSELING
  PARENT_MEETING
  OTHER

  @@schema("tenant")
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL

  @@schema("tenant")
}

enum AchievementType {
  ACADEMIC
  SPORTS
  ARTS
  LEADERSHIP
  COMMUNITY
  TECHNOLOGY
  OTHER

  @@schema("tenant")
}

enum AnnouncementType {
  GENERAL
  ACADEMIC
  EVENT
  EMERGENCY
  HOLIDAY
  MAINTENANCE

  @@schema("tenant")
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT

  @@schema("tenant")
}

enum PublishStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  ARCHIVED
  EXPIRED

  @@schema("tenant")
}

enum ConversationType {
  DIRECT
  GROUP
  BROADCAST
  SUPPORT

  @@schema("tenant")
}

enum MessageCategory {
  ACADEMIC
  BEHAVIOR
  HEALTH
  ATTENDANCE
  PAYMENT
  ADMINISTRATIVE
  OTHER

  @@schema("tenant")
}

enum MessageStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  ESCALATED

  @@schema("tenant")
}

enum NotificationType {
  SYSTEM
  ACADEMIC
  ATTENDANCE
  PAYMENT
  MESSAGE
  ANNOUNCEMENT
  EVENT
  HEALTH

  @@schema("tenant")
}

enum NotificationCategory {
  // Academic
  ATTENDANCE
  ACADEMIC_PERFORMANCE
  ACADEMIC_SUBMISSION
  HOMEWORK
  ASSESSMENT_RESULT
  REPORT_CARD

  // Behavior & Health
  BEHAVIOR_DISCIPLINE
  HEALTH_SAFETY
  DAILY_ACTIVITY
  MEAL_UPDATE

  // Financial
  PAYMENT_DUE
  PAYMENT_RECEIVED
  PAYMENT_OVERDUE
  INVOICE_READY

  // Communication
  TEACHER_MESSAGE
  SCHOOL_ANNOUNCEMENT
  EVENT_INVITATION
  PARENT_MEETING

  // System
  SYSTEM_UPDATE
  ACCOUNT_ACTIVITY
  MAINTENANCE

  @@schema("tenant")
}

enum NotificationChannel {
  PUSH_NOTIFICATION
  EMAIL
  SMS
  WHATSAPP
  IN_APP

  @@schema("tenant")
}

enum NotificationTiming {
  IMMEDIATE
  DAILY
  WEEKLY
  MONTHLY

  @@schema("tenant")
}

enum DigestFrequency {
  DAILY
  WEEKLY
  MONTHLY
  NEVER

  @@schema("tenant")
}

enum ConsentType {
  PHOTO_SHARING
  FIELD_TRIP
  MEDICAL_TREATMENT
  DATA_SHARING
  SPECIAL_PROGRAM
  SWIMMING
  SPORTS_PARTICIPATION

  @@schema("tenant")
}

enum TemplateCategory {
  GENERAL
  ACADEMIC
  FINANCIAL
  ATTENDANCE
  BEHAVIORAL
  ADMINISTRATIVE
  HEALTH

  @@schema("tenant")
}

enum EmailTemplateType {
  // Authentication & Account
  WELCOME
  EMAIL_VERIFICATION
  PASSWORD_RESET
  PASSWORD_CHANGED
  TWO_FACTOR_CODE
  ACCOUNT_LOCKED
  ACCOUNT_REACTIVATED

  // Enrollment & Admission
  ENROLLMENT_CONFIRMATION
  ENROLLMENT_ACCEPTED
  ENROLLMENT_REJECTED
  ENROLLMENT_WAITLIST
  CLASS_ASSIGNMENT
  GRADE_PROMOTION
  GRADE_RETENTION
  TRANSFER_CONFIRMATION

  // Academic Notifications
  REPORT_CARD_READY
  ASSESSMENT_PUBLISHED
  ASSESSMENT_REMINDER
  ASSESSMENT_RESULT
  HOMEWORK_ASSIGNED
  HOMEWORK_REMINDER
  ACADEMIC_WARNING
  ACHIEVEMENT_NOTIFICATION

  // Attendance
  ATTENDANCE_ABSENT
  ATTENDANCE_LATE
  ATTENDANCE_SUMMARY_WEEKLY
  ATTENDANCE_SUMMARY_MONTHLY
  ATTENDANCE_WARNING

  // Payment & Billing
  INVOICE_CREATED
  PAYMENT_REMINDER
  PAYMENT_OVERDUE
  PAYMENT_RECEIVED
  PAYMENT_RECEIPT
  INSTALLMENT_REMINDER
  INSTALLMENT_SCHEDULE
  PAYMENT_FAILED
  REFUND_PROCESSED

  // Communication
  ANNOUNCEMENT_GENERAL
  ANNOUNCEMENT_URGENT
  EVENT_INVITATION
  EVENT_REMINDER
  MEETING_INVITATION
  MEETING_REMINDER
  MEETING_CANCELLATION
  MESSAGE_NOTIFICATION

  // Discipline & Behavior
  DISCIPLINE_WARNING
  DISCIPLINE_ACTION
  BEHAVIOR_REPORT
  COUNSELING_APPOINTMENT
  PARENT_CONFERENCE_REQUEST

  // Leave & Permission
  LEAVE_REQUEST_SUBMITTED
  LEAVE_REQUEST_APPROVED
  LEAVE_REQUEST_REJECTED
  STUDENT_LEAVE_NOTIFICATION

  // Schedule & Timetable
  SCHEDULE_CHANGE
  SCHEDULE_PUBLISHED
  CLASS_CANCELLATION
  SUBSTITUTE_TEACHER

  // Parent Portal Specific
  DAILY_ACTIVITY_SUMMARY
  WEEKLY_PROGRESS_REPORT
  PHOTO_ALBUM_SHARED
  MEAL_UPDATE
  NAP_TIME_UPDATE
  HEALTH_CHECK_RESULT
  MILESTONE_ACHIEVED

  // System & Maintenance
  SYSTEM_MAINTENANCE
  SYSTEM_UPDATE
  DATA_EXPORT_READY
  BACKUP_COMPLETED
  API_LIMIT_WARNING
  SUBSCRIPTION_EXPIRING
  SUBSCRIPTION_RENEWED

  // Custom Templates
  CUSTOM_TEMPLATE

  @@schema("tenant")
}

enum EmailStatus {
  PENDING
  QUEUED
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  FAILED
  SPAM

  @@schema("tenant")
}

enum AuditCategory {
  GENERAL
  AUTHENTICATION
  ACADEMIC
  FINANCIAL
  ADMINISTRATIVE
  SECURITY
  COMMUNICATION

  @@schema("tenant")
}

enum SyncStatus {
  SUCCESS
  PARTIAL
  FAILED
  CANCELLED

  @@schema("tenant")
}

enum LessonPlanStatus {
  DRAFT
  REVIEWED
  APPROVED
  ARCHIVED

  @@schema("tenant")
}

enum ActivityStatus {
  PLANNED
  ONGOING
  COMPLETED
  CANCELLED

  @@schema("tenant")
}

enum EventType {
  ACADEMIC
  SPORTS
  CULTURAL
  PARENT_MEETING
  FIELD_TRIP
  EXAM
  HOLIDAY
  OTHER

  @@schema("tenant")
}

enum EventStatus {
  TENTATIVE
  CONFIRMED
  CANCELLED
  POSTPONED

  @@schema("tenant")
}

enum ReviewStatus {
  DRAFT
  SUBMITTED
  REVIEWED
  FINALIZED

  @@schema("tenant")
}

enum MaintenanceType {
  ROUTINE
  REPAIR
  EMERGENCY
  INSPECTION
  UPGRADE

  @@schema("tenant")
}

enum MaintenanceStatus {
  PENDING
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED

  @@schema("tenant")
}

enum FeedbackStatus {
  PENDING
  ACKNOWLEDGED
  IN_PROGRESS
  RESOLVED
  CLOSED

  @@schema("tenant")
}

// ==================== END OF ENHANCED SCHEMA ====================  @@index([paidAt])
model PaymentRefund {
  id        String @id @default(uuid()) @db.Uuid
  paymentId String @db.Uuid

  // Refund details
  amount      Decimal  @db.Decimal(12, 2)
  reason      String
  requestedBy String   @db.Uuid
  requestedAt DateTime @default(now())

  // Processing
  status      RefundStatus @default(PENDING)
  processedBy String?      @db.Uuid
  processedAt DateTime?

  // Gateway details
  refundTransactionId String? @unique
  gatewayResponse     Json?

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  payment Payment @relation(fields: [paymentId], references: [id])

  @@index([status])
  @@map("payment_refunds")
  @@schema("tenant")
}

model PaymentReminder {
  id              String  @id @default(uuid()) @db.Uuid
  feeAssignmentId String  @db.Uuid
  studentId       String  @db.Uuid
  parentId        String? @db.Uuid

  // Reminder details
  reminderType  ReminderType
  daysBeforeDue Int?
  daysAfterDue  Int?

  // Delivery
  status  ReminderStatus        @default(PENDING)
  sentAt  DateTime?
  sentVia NotificationChannel[]

  // Engagement tracking
  openedAt    DateTime?
  clickedAt   DateTime?
  actionTaken String?

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())

  feeAssignment FeeAssignment @relation(fields: [feeAssignmentId], references: [id])
  student       Student       @relation(fields: [studentId], references: [id])
  parent        Parent?       @relation(fields: [parentId], references: [id])

  @@index([studentId])
  @@index([status])
  @@index([reminderType])
  @@index([parentId])
  @@map("payment_reminders")
  @@schema("tenant")
}

model FeeWaiver {
  id              String @id @default(uuid()) @db.Uuid
  feeStructureId  String @db.Uuid
  feeAssignmentId String @db.Uuid

  // Waiver details
  amount     Decimal  @db.Decimal(12, 2)
  percentage Decimal? @db.Decimal(5, 2)
  reason     String
  category   String? // Scholarship, Hardship, Merit, etc.

  // Approval
  requestedBy String    @db.Uuid
  requestedAt DateTime  @default(now())
  approvedBy  String?   @db.Uuid
  approvedAt  DateTime?

  // Validity
  validFrom  DateTime  @default(now())
  validUntil DateTime?

  // Supporting documents
  documents Json?

  // Status
  status WaiverStatus @default(PENDING)

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  feeStructure  FeeStructure  @relation(fields: [feeStructureId], references: [id])
  feeAssignment FeeAssignment @relation(fields: [feeAssignmentId], references: [id])

  @@index([status])
  @@map("fee_waivers")
  @@schema("tenant")
}

// Scholarship Management
model StudentScholarship {
  id        String @id @default(uuid()) @db.Uuid
  studentId String @db.Uuid

  // Scholarship details
  name           String
  provider       String
  type           String // Merit, Need, Athletic, etc.
  amount         Decimal  @db.Decimal(12, 2)
  coverageType   String // Full, Partial, Percentage
  coverageAmount Decimal? @db.Decimal(5, 2) // For percentage

  // Period
  startDate DateTime
  endDate   DateTime

  // Renewal
  isRenewable     Boolean @default(false)
  renewalCriteria Json?

  // Status
  status ScholarshipStatus @default(ACTIVE)

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student Student @relation(fields: [studentId], references: [id])

  @@index([studentId])
  @@index([status])
  @@map("student_scholarships")
  @@schema("tenant")
}

// Parent Payment Methods
model ParentPaymentMethod {
  id       String @id @default(uuid()) @db.Uuid
  parentId String @db.Uuid

  // Method details
  methodType String // bank_transfer, credit_card, e_wallet
  provider   String // bca, mandiri, gopay, etc.

  // Tokenized info
  token       String? @unique
  last4       String?
  expiryMonth Int?
  expiryYear  Int?
  cardBrand   String?

  // Settings
  isDefault Boolean @default(false)
  isActive  Boolean @default(true)
  nickname  String?

  // Verification
  verifiedAt DateTime?

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent Parent @relation(fields: [parentId], references: [id])

  @@index([parentId, isDefault])
  @@map("parent_payment_methods")
  @@schema("tenant")
}

// Payment Consents
model PaymentConsent {
  id        String @id @default(uuid()) @db.Uuid
  parentId  String @db.Uuid
  studentId String @db.Uuid

  // Consent details
  consentType PaymentConsentType
  isGranted   Boolean
  grantedAt   DateTime?
  grantedFrom String? // IP address

  // Auto-pay settings
  autoPayEnabled   Boolean  @default(false)
  maxAutoPayAmount Decimal? @db.Decimal(12, 2)
  autoPayDay       Int? // Day of month

  // Validity
  expiresAt     DateTime?
  revokedAt     DateTime?
  revokedReason String?

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent Parent @relation(fields: [parentId], references: [id])

  @@unique([parentId, studentId, consentType])
  @@index([consentType])
  @@map("payment_consents")
  @@schema("tenant")
}

// Report Card System
model ReportCardTemplate {
  id       String         @id @default(uuid()) @db.Uuid
  schoolId String         @db.Uuid
  name     String
  code     String         @unique
  type     ReportCardType
  levels   SchoolLevel[]

  // Template structure
  layout   Json // Page layout configuration
  sections Json // Dynamic sections configuration
  /**
   * {
   * "header": {...},
   * "studentInfo": {...},
   * "academicResults": {...},
   * "attendance": {...},
   * "behavior": {...},
   * "extracurricular": {...},
   * "teacherComments": {...},
   * "parentComments": {...},
   * "footer": {...}
   * }
   */

  // Calculation formulas
  formulas Json
  /**
   * {
   * "finalGrade": "0.2 * daily + 0.2 * assignment + 0.3 * midterm + 0.3 * final",
   * "gpa": "sum(grade * credit) / sum(credit)",
   * "ranking": "..."
   * }
   */

  // Grading scale
  gradingScale Json

  // Status
  isActive  Boolean @default(true)
  isDefault Boolean @default(false)
  version   Int     @default(1)

  // Audit
  createdBy  String    @db.Uuid
  approvedBy String?   @db.Uuid
  approvedAt DateTime?

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reportCards ReportCard[]

  @@index([type])
  @@index([isActive])
  @@index([schoolId])
  @@map("report_card_templates")
  @@schema("tenant")
}

model ReportCard {
  id         String @id @default(uuid()) @db.Uuid
  templateId String @db.Uuid
  studentId  String @db.Uuid
  termId     String @db.Uuid

  // Generated data
  data Json // Dynamic content based on template
  /**
   * {
   * "studentInfo": {...},
   * "grades": [...],
   * "attendance": {...},
   * "behavior": {...},
   * "achievements": [...],
   * "teacherRemarks": "...",
   * "principalRemarks": "...",
   * "ranking": {...}
   * }
   */

  // Summary
  totalCredits Int?
  gpa          Decimal? @db.Decimal(4, 2)
  classRank    Int?
  gradeRank    Int?

  // Status
  status ReportCardStatus @default(DRAFT)

  // Generation & approval
  generatedAt DateTime?
  generatedBy String?   @db.Uuid
  reviewedBy  String?   @db.Uuid
  reviewedAt  DateTime?
  approvedBy  String?   @db.Uuid
  approvedAt  DateTime?

  // Publishing
  publishedAt DateTime?
  accessCode  String? // For parent portal access
  downloadUrl String?

  // Parent acknowledgment
  viewedByParents String[]  @default([])
  acknowledgedBy  String?   @db.Uuid
  acknowledgedAt  DateTime?

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  template ReportCardTemplate @relation(fields: [templateId], references: [id])
  term     AcademicTerm       @relation(fields: [termId], references: [id])

  @@unique([studentId, termId])
  @@index([status])
  @@index([termId])
  @@index([publishedAt])
  @@map("report_cards")
  @@schema("tenant")
}

// Student Behavior & Discipline
model DisciplineRecord {
  id        String @id @default(uuid()) @db.Uuid
  studentId String @db.Uuid

  // Incident details
  type         DisciplineType
  severity     Severity
  incidentDate DateTime
  location     String?
  description  String

  // People involved
  reportedBy       String   @db.Uuid
  witnessedBy      Json? // Array of witness IDs
  involvedStudents String[] // Other students involved

  // Action taken
  actionTaken String?
  actionDate  DateTime?
  handledBy   String?   @db.Uuid

  // Parent communication
  parentNotified   Boolean   @default(false)
  parentNotifiedAt DateTime?
  parentResponse   String?

  // Follow up
  followUpRequired Boolean   @default(false)
  followUpDate     DateTime?
  followUpNotes    String?

  // Resolution
  resolvedAt DateTime?
  resolvedBy String?   @db.Uuid
  resolution String?

  // Attachments
  attachments Json?

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student Student @relation(fields: [studentId], references: [id])

  @@index([type])
  @@index([severity])
  @@index([studentId])
  @@index([incidentDate])
  @@map("discipline_records")
  @@schema("tenant")
}

model Achievement {
  id        String @id @default(uuid()) @db.Uuid
  studentId String @db.Uuid

  // Achievement details
  type        AchievementType
  category    String? // Sub-category
  title       String
  description String?

  // Level & recognition
  level String? // School, District, National, International
  rank  String? // 1st, 2nd, 3rd, Participant, etc.

  // Event details
  eventName String?
  organizer String?
  date      DateTime
  venue     String?

  // Documentation
  certificateUrl String?
  photos         Json?
  newsUrl        String?

  // Points (for house system)
  points Int @default(0)

  // Verification
  verifiedBy String?   @db.Uuid
  verifiedAt DateTime?

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student Student @relation(fields: [studentId], references: [id])

  @@index([type])
  @@index([level])
  @@index([date])
  @@index([studentId])
  @@map("achievements")
  @@schema("tenant")
}

// Health & Wellness
model HealthRecord {
  id        String @id @default(uuid()) @db.Uuid
  studentId String @db.Uuid

  // Record details
  recordType String // Checkup, Vaccination, Illness, Injury, etc.
  date       DateTime

  // Health metrics
  height        Float?  @db.Real // cm
  weight        Float?  @db.Real // kg
  bmi           Float?  @db.Real
  bloodPressure String?
  temperature   Float?  @db.Real

  // Medical details
  symptoms   String?
  diagnosis  String?
  treatment  String?
  medication Json?

  // Provider info
  providerName String?
  providerType String? // School nurse, doctor, hospital

  // Follow up
  followUpRequired Boolean   @default(false)
  followUpDate     DateTime?

  // Attachments
  documents Json?

  // Parent notification
  parentNotified Boolean @default(false)

  // Metadata
  metadata   Json     @default("{}")
  recordedBy String   @db.Uuid
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  student Student @relation(fields: [studentId], references: [id])

  @@index([studentId])
  @@index([recordType])
  @@index([date])
  @@map("health_records")
  @@schema("tenant")
}

model CounselingRecord {
  id        String @id @default(uuid()) @db.Uuid
  studentId String @db.Uuid

  // Session details
  sessionDate DateTime
  sessionType String // Academic, Behavioral, Personal, Career
  counselorId String   @db.Uuid
  duration    Int? // Minutes

  // Session content
  presentingIssue String
  notes           String // Encrypted
  actionPlan      String?

  // Follow up
  followUpRequired Boolean   @default(false)
  nextSessionDate  DateTime?

  // Referrals
  referredTo     String?
  referralReason String?

  // Parent involvement
  parentInvolved Boolean @default(false)
  parentConsent  Boolean @default(false)

  // Confidentiality
  confidentialityLevel String @default("STANDARD") // STANDARD, HIGH

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student Student @relation(fields: [studentId], references: [id])

  @@index([studentId])
  @@index([sessionType])
  @@index([counselorId])
  @@map("counseling_records")
  @@schema("tenant")
}

// Parent Portal Features
model ParentPortalMetrics {
  id       String @id @default(uuid()) @db.Uuid
  parentId String @unique @db.Uuid

  // Login metrics
  lastLoginAt      DateTime?
  loginCount       Int       @default(0)
  totalSessionTime Int       @default(0) // Minutes

  // Feature usage
  reportCardsViewed Int @default(0)
  paymentsViewed    Int @default(0)
  paymentsMade      Int @default(0)
  messagesRead      Int @default(0)
  messagesSent      Int @default(0)
  attendanceChecks  Int @default(0)
  activitiesViewed  Int @default(0)
  photosViewed      Int @default(0)

  // Last activity
  lastActivityAt   DateTime?
  lastActivityType String?

  // Device info
  preferredDevice String? // mobile, tablet, desktop
  appVersion      String?
  deviceTokens    String[] // For push notifications

  // Language tracking
  languageChangeCount Int       @default(0)
  lastLanguageChange  DateTime?

  // Engagement score
  engagementScore Float @default(0) @db.Real

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent Parent @relation(fields: [parentId], references: [id])

  @@map("parent_portal_metrics")
  @@schema("tenant")
}

model StudentDailyActivity {
  id        String   @id @default(uuid()) @db.Uuid
  studentId String   @db.Uuid
  date      DateTime @db.Date

  // Check-in/out
  arrivalTime    DateTime?
  arrivalPhoto   String?
  departureTime  DateTime?
  departurePhoto String?
  pickedUpBy     String?
  pickupPhoto    String?

  // Mood & behavior
  moodOnArrival   String?
  moodAtDeparture String?
  overallBehavior String?
  behaviorNotes   String?

  // Meals
  meals Json @default("[]")
  /**
   * [
   * {
   * "type": "breakfast",
   * "time": "08:30",
   * "menu": "Porridge and fruits",
   * "consumed": "all", // all, most, some, none
   * "notes": "Loved the porridge",
   * "photo": "https://..."
   * }
   * ]
   */

  // Health
  waterIntake String?
  temperature Decimal? @db.Decimal(3, 1)
  healthNotes String?

  // Rest
  napTime Json?
  /**
   * {
   * "start": "13:00",
   * "end": "14:30",
   * "quality": "good",
   * "notes": "Slept well"
   * }
   */

  // Hygiene
  bathroomVisits Int @default(0)
  diaperChanges  Int @default(0)
  handWashing    Int @default(0)

  // Activities & Learning
  activities Json[] @default([])
  /**
   * [
   * {
   * "time": "09:00",
   * "activity": "Art & Craft",
   * "category": "creative",
   * "duration": 30,
   * "participation": "active",
   * "skills": ["fine_motor", "creativity"],
   * "photos": ["url1", "url2"],
   * "notes": "Made a beautiful painting"
   * }
   * ]
   */

  // Learning topics
  learningTopics   String[]
  learningOutcomes Json?

  // Social interaction
  playedWith    String[] // Student IDs
  socialSkills  Json?
  conflictNotes String?

  // Special moments
  specialMoments String?
  milestones     Json?

  // Teacher observations
  teacherNotes   String?
  concernsRaised String?

  // Media
  photos Json[] @default([])
  videos Json[] @default([])

  // Medication (if any)
  medicationGiven Json?

  // Incident/injury
  injuryReport Json?

  // Parent engagement
  viewedByParents String[] @default([])
  viewedAt        Json[]   @default([]) // Parent ID -> timestamp mapping
  parentComments  Json[]   @default([])
  parentReactions Json[]   @default([]) // Likes, hearts, etc.

  // Created by
  createdBy String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student Student @relation(fields: [studentId], references: [id])

  @@unique([studentId, date])
  @@index([date])
  @@map("student_daily_activities")
  @@schema("tenant")
}

model ParentNotificationPreference {
  id       String @id @default(uuid()) @db.Uuid
  parentId String @unique @db.Uuid

  // Global settings
  useDefaultSettings Boolean @default(true)

  // Channel preferences
  emailEnabled    Boolean @default(true)
  smsEnabled      Boolean @default(false)
  whatsappEnabled Boolean @default(true)
  pushEnabled     Boolean @default(true)

  // Category overrides
  overrides Json @default("{}")
  /**
   * {
   * "academic": { "enabled": true, "channels": ["email", "push"] },
   * "attendance": { "enabled": true, "channels": ["whatsapp"] },
   * "payment": { "enabled": true, "channels": ["email", "sms"] },
   * "dailyActivity": { "enabled": true, "channels": ["push"] },
   * "health": { "enabled": true, "channels": ["whatsapp", "push"] }
   * }
   */

  // Timing preferences
  quietHoursStart      DateTime? @db.Time
  quietHoursEnd        DateTime? @db.Time
  timezone             String    @default("Asia/Jakarta")
  weekendNotifications Boolean   @default(false)
  preferredTime        DateTime? @db.Time // For non-urgent

  // Language & format
  digestFrequency DigestFrequency @default(WEEKLY)
  includePhotos   Boolean         @default(true)

  // Smart batching
  smartBatching  Boolean @default(true)
  maxDailyEmails Int     @default(5)
  maxDailySMS    Int     @default(3)

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent Parent @relation(fields: [parentId], references: [id])

  @@map("parent_notification_preferences")
  @@schema("tenant")
}

model ParentConsent {
  id        String @id @default(uuid()) @db.Uuid
  parentId  String @db.Uuid
  studentId String @db.Uuid

  // Consent details
  consentType ConsentType
  granted     Boolean
  grantedAt   DateTime?
  grantedBy   String? // IP address or device ID

  // Validity
  validFrom DateTime  @default(now())
  expiresAt DateTime?

  // Documentation
  documentUrl String? // Signed consent form
  signature   String? // Digital signature

  // Revocation
  revokedAt        DateTime?
  revokedBy        String?
  revocationReason String?

  // Notes
  notes String?

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent  Parent  @relation(fields: [parentId], references: [id])
  student Student @relation(fields: [studentId], references: [id])

  @@unique([parentId, studentId, consentType])
  @@index([consentType])
  @@index([expiresAt])
  @@map("parent_consents")
  @@schema("tenant")
}

model ParentFeedback {
  id       String @id @default(uuid()) @db.Uuid
  parentId String @db.Uuid

  // Feedback details
  category    String // academic, communication, facility, etc.
  subcategory String?
  rating      Int? // 1-5 stars
  title       String
  description String

  // Context
  relatedTo   String? // student_id, teacher_id, etc.
  relatedType String? // student, teacher, facility, event

  // Status
  status   FeedbackStatus @default(PENDING)
  priority Priority       @default(NORMAL)

  // Response
  respondedBy String?   @db.Uuid
  respondedAt DateTime?
  response    String?

  // Resolution
  resolvedAt   DateTime?
  resolution   String?
  satisfaction Int? // 1-5 rating on resolution

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent Parent @relation(fields: [parentId], references: [id])

  @@index([parentId])
  @@index([category])
  @@index([status])
  @@index([priority])
  @@map("parent_feedback")
  @@schema("tenant")
}

// Communication System
model Announcement {
  id       String @id @default(uuid()) @db.Uuid
  schoolId String @db.Uuid

  // Content
  title   Json // Multilingual
  content Json // Multilingual rich text
  summary Json? // Short version for notifications

  // Categorization
  type     AnnouncementType
  category String?
  tags     String[]         @default([])
  priority Priority         @default(NORMAL)

  // Target audience
  targetAudience String[] // Role codes or group IDs
  targetGrades   String[] @default([])
  targetClasses  String[] @default([])

  // Media
  attachments Json?
  coverImage  String?

  // Schedule
  publishAt DateTime
  expiresAt DateTime?
  isPinned  Boolean   @default(false)

  // Author
  createdBy  String    @db.Uuid
  approvedBy String?   @db.Uuid
  approvedAt DateTime?

  // Status
  status PublishStatus @default(DRAFT)

  // Engagement tracking
  viewCount Int      @default(0)
  viewedBy  String[] @default([])

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  translations AnnouncementTranslation[]

  @@index([type])
  @@index([priority])
  @@index([status])
  @@index([publishAt])
  @@index([schoolId])
  @@map("announcements")
  @@schema("tenant")
}

model ParentTeacherMessage {
  id             String @id @default(uuid()) @db.Uuid
  conversationId String @db.Uuid

  // Request details
  requestedBy     String   @db.Uuid
  requestedByRole UserRole
  studentId       String   @db.Uuid

  // Message info
  subject  String
  urgency  Priority        @default(NORMAL)
  category MessageCategory

  // Status
  status     MessageStatus @default(OPEN)
  assignedTo String?       @db.Uuid

  // Resolution
  resolvedAt      DateTime?
  resolvedBy      String?   @db.Uuid
  resolutionNotes String?

  // Satisfaction
  satisfactionRating  Int? // 1-5 rating
  satisfactionComment String?

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversation Conversation @relation(fields: [conversationId], references: [id])
  student      Student      @relation(fields: [studentId], references: [id])

  @@index([status])
  @@index([studentId])
  @@index([urgency])
  @@index([category])
  @@map("parent_teacher_messages")
  @@schema("tenant")
}

model Conversation {
  id   String           @id @default(uuid()) @db.Uuid
  type ConversationType

  // Participants
  participants       String[]
  activeParticipants String[] @default([])

  // Conversation info
  subject  String?
  category String?

  // Last activity
  lastMessageAt      DateTime?
  lastMessageBy      String?   @db.Uuid
  lastMessagePreview String?

  // Settings
  isArchived Boolean @default(false)
  isMuted    Json    @default("{}") // User ID -> muted until

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages              Message[]
  parentTeacherMessages ParentTeacherMessage[]

  @@index([type])
  @@index([lastMessageAt])
  @@map("conversations")
  @@schema("tenant")
}

model Message {
  id             String @id @default(uuid()) @db.Uuid
  conversationId String @db.Uuid
  senderId       String @db.Uuid

  // Message content
  content     String
  contentType String @default("text") // text, image, file

  // Attachments
  attachments Json?

  // Reply
  replyToId String? @db.Uuid

  // Read receipts
  readBy Json @default("[]")
  /**
   * [
   * {"userId": "...", "readAt": "..."},
   * {"userId": "...", "readAt": "..."}
   * ]
   */

  // Edit history
  editedAt    DateTime?
  editHistory Json      @default("[]")

  // Deletion
  deletedAt  DateTime?
  deletedFor String[]  @default([]) // Soft delete per user

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id])

  @@index([conversationId])
  @@index([senderId])
  @@index([createdAt])
  @@map("messages")
  @@schema("tenant")
}

// ==================== SHARED SCHEMA (shared) ====================
// Common reference data across all tenants

model Country {
  id           String  @id @default(uuid()) @db.Uuid
  code         String  @unique @db.VarChar(2) // ISO 3166-1 alpha-2
  code3        String  @unique @db.VarChar(3) // ISO 3166-1 alpha-3
  name         Json // Multilingual names
  phoneCode    String  @db.VarChar(10)
  currencyCode String  @db.VarChar(3)
  isActive     Boolean @default(true)

  provinces Province[]

  @@map("countries")
  @@schema("shared")
}

model Province {
  id        String @id @default(uuid()) @db.Uuid
  countryId String @db.Uuid
  code      String @db.VarChar(10)
  name      Json // Multilingual names

  country Country @relation(fields: [countryId], references: [id])
  cities  City[]

  @@unique([countryId, code])
  @@map("provinces")
  @@schema("shared")
}

model City {
  id         String @id @default(uuid()) @db.Uuid
  provinceId String @db.Uuid
  code       String @db.VarChar(10)
  name       Json // Multilingual names
  postalCode String @db.VarChar(10)

  province  Province   @relation(fields: [provinceId], references: [id])
  districts District[]

  @@unique([provinceId, code])
  @@map("cities")
  @@schema("shared")
}

model District {
  id     String @id @default(uuid()) @db.Uuid
  cityId String @db.Uuid
  code   String @db.VarChar(10)
  name   Json // Multilingual names

  city City @relation(fields: [cityId], references: [id])

  @@unique([cityId, code])
  @@map("districts")
  @@schema("shared")
}

model Currency {
  id       String  @id @default(uuid()) @db.Uuid
  code     String  @unique @db.VarChar(3) // ISO 4217
  name     String
  symbol   String  @db.VarChar(5)
  decimals Int     @default(2)
  isActive Boolean @default(true)

  @@map("currencies")
  @@schema("shared")
}

// ==================== PLATFORM LEVEL (public schema) ====================

model Platform {
  id              String         @id @default(uuid()) @db.Uuid
  name            String
  domain          String         @unique
  status          PlatformStatus @default(ACTIVE)
  settings        Json           @default("{}")
  maintenanceMode Boolean        @default(false)

  // Platform configuration
  defaultCurrency   String @default("IDR") @db.VarChar(3)
  defaultCountry    String @default("ID") @db.VarChar(2)
  defaultTimezone   String @default("Asia/Jakarta")
  maxTenantsAllowed Int? // null = unlimited

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenants          Tenant[]
  languages        PlatformLanguage[]
  features         PlatformFeature[]
  platformSettings PlatformSetting[]
  auditLogs        PlatformAuditLog[]

  @@index([status])
  @@map("platforms")
  @@schema("public")
}

model Tenant {
  id         String       @id @default(uuid()) @db.Uuid
  platformId String       @db.Uuid
  name       String
  code       String       @unique @db.VarChar(50)
  type       TenantType   @default(SINGLE_SCHOOL) // FOUNDATION or SINGLE_SCHOOL
  status     TenantStatus @default(ACTIVE)

  // Tenant configuration
  settings          Json   @default("{}")
  defaultCurrency   String @default("IDR") @db.VarChar(3)
  defaultTimezone   String @default("Asia/Jakarta")
  schemaPrefix      String @unique // Prefix for tenant schemas
  maxSchoolsAllowed Int? // null = unlimited (for foundations)

  // Contact information
  primaryContactName  String?
  primaryContactEmail String?
  primaryContactPhone String?

  // Billing information (simplified)
  billingInfo Json @default("{}")
  /**
   * {
   * "model": "PER_STUDENT",
   * "pricePerStudent": 15000,
   * "billingCycle": "MONTHLY",
   * "paymentTerms": 30,
   * "volumeDiscounts": [
   * { "minStudents": 500, "discount": 10 },
   * { "minStudents": 1000, "discount": 20 }
   * ],
   * "customPricing": null // For negotiated rates
   * }
   */

  // Real-time metrics
  currentStudents  Int      @default(0)
  lastStudentCount Int      @default(0)
  studentCountDate DateTime @default(now())

  billingEmail   String?
  billingAddress Json?

  // Data retention policy
  dataRetentionDays Int       @default(2555) // 7 years default
  lastDataPurge     DateTime?

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  platform        Platform            @relation(fields: [platformId], references: [id])
  schools         School[]
  tenantUsers     TenantUser[]
  subscriptions   Subscription[]
  usage           TenantUsage[]
  invoices        TenantInvoice[]
  payments        TenantPayment[]
  billingAlerts   BillingAlert[]
  tenantFeatures  TenantFeature[]
  tenantLanguages TenantLanguage[]
  integrations    TenantIntegration[]
  apiKeys         TenantApiKey[]

  @@index([platformId])
  @@index([status])
  @@index([type])
  @@index([currentStudents])
  @@map("tenants")
  @@schema("public")
}

model School {
  id           String        @id @default(uuid()) @db.Uuid
  tenantId     String        @db.Uuid
  schemaName   String        @unique @db.VarChar(100) // Actual schema name in DB
  name         String
  code         String        @unique @db.VarChar(50)
  npsn         String?       @unique @db.VarChar(20) // National school ID
  type         SchoolType
  levels       SchoolLevel[]
  subdomain    String        @unique
  customDomain String?       @unique

  // School information
  establishedDate DateTime?
  accreditation   String?
  accreditedBy    String?
  accreditedUntil DateTime?

  // Location (references shared schema)
  countryCode String @db.VarChar(2)
  address     Json // Structured address with province, city, district references
  coordinates Json? // { "lat": -6.2088, "lng": 106.8456 }

  // Contact
  contactInfo Json
  /**
   * {
   * "phone": "+62-21-1234567",
   * "fax": "+62-21-1234568",
   * "email": "info@school.sch.id",
   * "website": "https://school.sch.id",
   * "socialMedia": {
   * "facebook": "...",
   * "instagram": "...",
   * "youtube": "..."
   * }
   * }
   */

  // White label configuration
  whiteLabelConfig Json @default("{}")

  // Parent portal configuration  
  parentPortalConfig Json @default("{}")

  // Academic configuration
  academicConfig Json @default("{}")
  /**
   * {
   * "gradingSystem": "NUMERIC_100", // or "LETTER_GRADE", "NUMERIC_10"
   * "passingGrade": 75,
   * "semestersPerYear": 2,
   * "academicYearStart": "07", // Month
   * "reportCardType": "STANDARD", // or "CAMBRIDGE", "IB", "CUSTOM"
   * "assessmentWeights": {
   * "daily": 20,
   * "assignment": 20,
   * "midterm": 30,
   * "final": 30
   * }
   * }
   */

  // Financial configuration
  financialConfig Json @default("{}")
  /**
   * {
   * "fiscalYearStart": "01", // Month
   * "defaultPaymentTerms": 7, // Days
   * "lateFeeRate": 0.01, // 1% per month
   * "acceptedPaymentMethods": ["bank_transfer", "cash", "e_wallet"],
   * "bankAccounts": [
   * {
   * "bankName": "BCA",
   * "accountNumber": "1234567890",
   * "accountName": "Yayasan Pendidikan XYZ"
   * }
   * ]
   * }
   */

  // School status
  status           SchoolStatus @default(ACTIVE)
  activatedAt      DateTime     @default(now())
  suspendedAt      DateTime?
  suspensionReason String?

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant             Tenant              @relation(fields: [tenantId], references: [id])
  schoolLanguages    SchoolLanguage[]
  installmentPlans   InstallmentPlan[]
  schoolFeatures     SchoolFeature[]
  schoolIntegrations SchoolIntegration[]
  schoolMetrics      SchoolMetrics?

  @@index([tenantId])
  @@index([status])
  @@index([type])
  @@index([customDomain])
  @@map("schools")
  @@schema("public")
}

// Platform Language Management
model PlatformLanguage {
  id         String         @id @default(uuid()) @db.Uuid
  platformId String         @db.Uuid
  code       String         @db.VarChar(10) // ISO 639-1
  name       String
  nativeName String
  rtl        Boolean        @default(false)
  tier       Int            @default(1)
  basePrice  Decimal        @db.Decimal(12, 2)
  status     LanguageStatus @default(ACTIVE)

  // Translation resources
  translationProgress Int  @default(0) // Percentage
  translations        Json @default("{}") // Core UI translations

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  platform        Platform         @relation(fields: [platformId], references: [id])
  schoolLanguages SchoolLanguage[]
  tenantLanguages TenantLanguage[]

  @@unique([platformId, code])
  @@index([status])
  @@map("platform_languages")
  @@schema("public")
}

// Tenant Language Configuration
model TenantLanguage {
  id             String   @id @default(uuid()) @db.Uuid
  tenantId       String   @db.Uuid
  languageId     String   @db.Uuid
  isEnabled      Boolean  @default(true)
  customPrice    Decimal? @db.Decimal(12, 2) // Override platform price
  freeForSchools Boolean  @default(false) // Free for all schools in tenant

  tenant   Tenant           @relation(fields: [tenantId], references: [id])
  language PlatformLanguage @relation(fields: [languageId], references: [id])

  @@unique([tenantId, languageId])
  @@map("tenant_languages")
  @@schema("public")
}

model SchoolLanguage {
  id         String     @id @default(uuid()) @db.Uuid
  schoolId   String     @db.Uuid
  languageId String     @db.Uuid
  isPrimary  Boolean    @default(false)
  isFree     Boolean    @default(false)
  monthlyFee Decimal    @default(0) @db.Decimal(12, 2)
  status     BaseStatus @default(ACTIVE)

  // Usage tracking
  activeUsers Int       @default(0)
  lastUsedAt  DateTime?

  activatedAt   DateTime  @default(now())
  deactivatedAt DateTime?

  school   School           @relation(fields: [schoolId], references: [id])
  language PlatformLanguage @relation(fields: [languageId], references: [id])

  @@unique([schoolId, languageId])
  @@index([status])
  @@map("school_languages")
  @@schema("public")
}

// Enhanced Subscription Management
model SubscriptionPlan {
  id          String           @id @default(uuid()) @db.Uuid
  name        String
  code        String           @unique
  description String?
  type        SubscriptionType @default(PER_STUDENT)

  // Pricing
  basePrice       Decimal @db.Decimal(10, 2)
  minStudents     Int     @default(100)
  maxStudents     Int?
  volumeDiscounts Json    @default("[]")

  // Features
  features             Json
  includedLanguages    Int    @default(2)
  includedIntegrations Int    @default(0)
  supportLevel         String @default("STANDARD") // STANDARD, PRIORITY, DEDICATED

  // Billing
  billingCycles  BillingCycle[] @default([MONTHLY])
  annualDiscount Decimal        @default(10) @db.Decimal(5, 2)
  setupFee       Decimal        @default(0) @db.Decimal(12, 2)

  // Status
  status    BaseStatus @default(ACTIVE)
  isDefault Boolean    @default(false)
  isPublic  Boolean    @default(true) // Visible in pricing page
  sortOrder Int        @default(0)

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscriptions Subscription[]
  planFeatures  SubscriptionPlanFeature[]

  @@index([status])
  @@index([type])
  @@index([sortOrder])
  @@map("subscription_plans")
  @@schema("public")
}

model Subscription {
  id       String             @id @default(uuid()) @db.Uuid
  tenantId String             @db.Uuid
  planId   String             @db.Uuid
  status   SubscriptionStatus @default(ACTIVE)

  // Subscription period
  startDate          DateTime  @default(now())
  endDate            DateTime?
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime

  // Billing
  billingCycle    BillingCycle @default(MONTHLY)
  nextBillingDate DateTime
  priceOverride   Decimal?     @db.Decimal(12, 2) // Custom pricing

  // Trial
  trialEndDate  DateTime?
  trialExtended Boolean   @default(false)

  // Cancellation
  cancelledAt        DateTime?
  cancellationReason String?

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant              @relation(fields: [tenantId], references: [id])
  plan   SubscriptionPlan    @relation(fields: [planId], references: [id])
  addons SubscriptionAddon[]

  @@index([tenantId])
  @@index([status])
  @@index([nextBillingDate])
  @@map("subscriptions")
  @@schema("public")
}

// Feature Management
model PlatformFeature {
  id          String     @id @default(uuid()) @db.Uuid
  platformId  String     @db.Uuid
  code        String     @unique
  name        String
  description String?
  category    String
  isCore      Boolean    @default(false)
  status      BaseStatus @default(ACTIVE)

  // Feature configuration
  config Json @default("{}")

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  platform                 Platform                  @relation(fields: [platformId], references: [id])
  tenantFeatures           TenantFeature[]
  schoolFeatures           SchoolFeature[]
  subscriptionPlanFeatures SubscriptionPlanFeature[]

  @@index([platformId])
  @@index([category])
  @@index([status])
  @@map("platform_features")
  @@schema("public")
}

model TenantFeature {
  id        String  @id @default(uuid()) @db.Uuid
  tenantId  String  @db.Uuid
  featureId String  @db.Uuid
  isEnabled Boolean @default(true)

  // Override configuration
  config Json?

  // Usage limits
  usageLimit   Int?
  currentUsage Int  @default(0)

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant  Tenant          @relation(fields: [tenantId], references: [id])
  feature PlatformFeature @relation(fields: [featureId], references: [id])

  @@unique([tenantId, featureId])
  @@map("tenant_features")
  @@schema("public")
}

model SchoolFeature {
  id        String  @id @default(uuid()) @db.Uuid
  schoolId  String  @db.Uuid
  featureId String  @db.Uuid
  isEnabled Boolean @default(true)

  // Override configuration
  config Json?

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school  School          @relation(fields: [schoolId], references: [id])
  feature PlatformFeature @relation(fields: [featureId], references: [id])

  @@unique([schoolId, featureId])
  @@map("school_features")
  @@schema("public")
}

model SubscriptionPlanFeature {
  id        String @id @default(uuid()) @db.Uuid
  planId    String @db.Uuid
  featureId String @db.Uuid

  // Feature limits for this plan
  limit  Int?
  config Json?

  plan    SubscriptionPlan @relation(fields: [planId], references: [id])
  feature PlatformFeature  @relation(fields: [featureId], references: [id])

  @@unique([planId, featureId])
  @@map("subscription_plan_features")
  @@schema("public")
}

// Enhanced Billing Management
model TenantInvoice {
  id            String @id @default(uuid()) @db.Uuid
  tenantId      String @db.Uuid
  invoiceNumber String @unique

  // Invoice type
  type InvoiceType @default(SUBSCRIPTION)

  // Period information
  billingPeriod DateTime @db.Date
  periodStart   DateTime @db.Date
  periodEnd     DateTime @db.Date

  // Student count details
  studentCount    Int
  avgStudentCount Int?
  pricePerStudent Decimal @db.Decimal(10, 2)

  // Amount breakdown
  baseAmount     Decimal @db.Decimal(12, 2)
  volumeDiscount Decimal @default(0) @db.Decimal(12, 2)
  additionalFees Decimal @default(0) @db.Decimal(12, 2)
  tax            Decimal @default(0) @db.Decimal(12, 2)
  totalAmount    Decimal @db.Decimal(12, 2)

  // Payment tracking
  status     InvoiceStatus @default(PENDING)
  dueDate    DateTime
  paidAmount Decimal       @default(0) @db.Decimal(12, 2)
  paidAt     DateTime?

  // Invoice details
  notes    String?
  metadata Json    @default("{}")

  // Audit
  issuedBy  String   @db.Uuid
  issuedAt  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant            @relation(fields: [tenantId], references: [id])
  payments  TenantPayment[]
  lineItems InvoiceLineItem[]

  @@index([tenantId])
  @@index([status])
  @@index([dueDate])
  @@index([billingPeriod])
  @@index([type])
  @@map("tenant_invoices")
  @@schema("public")
}

model InvoiceLineItem {
  id          String       @id @default(uuid()) @db.Uuid
  invoiceId   String       @db.Uuid
  itemType    LineItemType
  description String
  quantity    Int          @default(1)
  unitPrice   Decimal      @db.Decimal(10, 2)
  amount      Decimal      @db.Decimal(12, 2)

  // Tax handling
  taxRate   Decimal? @db.Decimal(5, 2)
  taxAmount Decimal? @db.Decimal(12, 2)

  metadata Json @default("{}")

  invoice TenantInvoice @relation(fields: [invoiceId], references: [id])

  @@index([invoiceId])
  @@map("invoice_line_items")
  @@schema("public")
}

model TenantPayment {
  id        String  @id @default(uuid()) @db.Uuid
  tenantId  String  @db.Uuid
  invoiceId String? @db.Uuid

  // Payment details
  amount         Decimal @db.Decimal(12, 2)
  currency       String  @default("IDR") @db.VarChar(3)
  paymentMethod  String
  paymentGateway String?
  transactionId  String  @unique

  // Status
  status        PaymentStatus @default(PENDING)
  paidAt        DateTime?
  failureReason String?

  // Gateway response
  gatewayResponse Json?

  // Reconciliation
  reconciledAt DateTime?
  reconciledBy String?   @db.Uuid

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant  Tenant         @relation(fields: [tenantId], references: [id])
  invoice TenantInvoice? @relation(fields: [invoiceId], references: [id])

  @@index([tenantId])
  @@index([status])
  @@index([paidAt])
  @@map("tenant_payments")
  @@schema("public")
}

// Usage Tracking
model TenantUsage {
  id         String   @id @default(uuid()) @db.Uuid
  tenantId   String   @db.Uuid
  recordDate DateTime @db.Date

  // Core metrics
  activeStudents Int
  activeTeachers Int
  activeSchools  Int
  activeParents  Int

  // Enrollment changes
  newEnrollments Int @default(0)
  withdrawals    Int @default(0)
  graduations    Int @default(0)

  // Activity metrics
  dailyActiveUsers Int   @default(0)
  apiCallsCount    Int   @default(0)
  storageUsedGB    Float @default(0)

  // Financial metrics
  collectionsToday  Decimal @default(0) @db.Decimal(12, 2)
  outstandingAmount Decimal @default(0) @db.Decimal(12, 2)

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@unique([tenantId, recordDate])
  @@index([recordDate])
  @@map("tenant_usage")
  @@schema("public")
}

// School Metrics (Aggregated)
model SchoolMetrics {
  id       String @id @default(uuid()) @db.Uuid
  schoolId String @unique @db.Uuid

  // Current counts
  totalStudents Int @default(0)
  totalTeachers Int @default(0)
  totalStaff    Int @default(0)
  totalParents  Int @default(0)
  totalClasses  Int @default(0)

  // Academic metrics
  avgAttendanceRate Float? @db.Real
  avgGPA            Float? @db.Real
  graduationRate    Float? @db.Real

  // Financial metrics
  collectionRate    Float?  @db.Real
  avgDaysToPayment  Float?  @db.Real
  outstandingAmount Decimal @default(0) @db.Decimal(12, 2)

  // Engagement metrics
  parentPortalAdoption Float? @db.Real
  avgDailyActiveUsers  Int    @default(0)

  lastCalculated DateTime @default(now())

  school School @relation(fields: [schoolId], references: [id])

  @@map("school_metrics")
  @@schema("public")
}

// Billing Alerts
model BillingAlert {
  id        String    @id @default(uuid()) @db.Uuid
  tenantId  String    @db.Uuid
  alertType AlertType

  title    String
  message  String
  severity AlertSeverity

  // Alert details
  relatedInvoiceId String?  @db.Uuid
  dueAmount        Decimal? @db.Decimal(12, 2)
  daysOverdue      Int?

  // Status tracking
  isRead      Boolean   @default(false)
  readAt      DateTime?
  readBy      String?   @db.Uuid
  isDismissed Boolean   @default(false)
  dismissedAt DateTime?
  dismissedBy String?   @db.Uuid

  // Actions
  actionUrl  String?
  actionText String?

  // Metadata
  metadata  Json      @default("{}")
  createdAt DateTime  @default(now())
  expiresAt DateTime?

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@index([tenantId, isRead])
  @@index([alertType])
  @@index([severity])
  @@index([createdAt])
  @@map("billing_alerts")
  @@schema("public")
}

// White Label Management
model WhiteLabelPlan {
  id          String         @id @default(uuid()) @db.Uuid
  name        String
  code        String         @unique
  description String?
  tier        WhiteLabelTier

  // Pricing
  setupFee   Decimal @db.Decimal(12, 2)
  monthlyFee Decimal @db.Decimal(12, 2)

  // Features
  features Json @default("{}")

  // Limits
  maxCustomDomains Int @default(1)
  includedStorage  Int @default(10) // GB

  // Status
  sortOrder Int        @default(0)
  status    BaseStatus @default(ACTIVE)

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscriptions WhiteLabelSubscription[]

  @@index([status])
  @@index([tier])
  @@index([sortOrder])
  @@map("white_label_plans")
  @@schema("public")
}

model WhiteLabelSubscription {
  id       String           @id @default(uuid()) @db.Uuid
  schoolId String           @unique @db.Uuid
  planId   String           @db.Uuid
  status   WhiteLabelStatus @default(ACTIVE)

  // Domain configuration
  domainVerified Boolean   @default(false)
  sslEnabled     Boolean   @default(false)
  sslProvider    String?
  sslExpiry      DateTime?

  // Billing
  setupPaid        Boolean  @default(false)
  nextBillingDate  DateTime
  lastBilledAmount Decimal  @db.Decimal(12, 2)

  // Subscription lifecycle
  activatedAt DateTime  @default(now())
  suspendedAt DateTime?
  cancelledAt DateTime?
  expiresAt   DateTime?

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  plan          WhiteLabelPlan       @relation(fields: [planId], references: [id])
  domainRecords DomainVerification[]

  @@index([status])
  @@map("white_label_subscriptions")
  @@schema("public")
}

model DomainVerification {
  id             String             @id @default(uuid()) @db.Uuid
  subscriptionId String             @db.Uuid
  domain         String
  verifyToken    String             @unique
  verifyMethod   VerificationMethod

  // Verification status
  verified   Boolean   @default(false)
  verifiedAt DateTime?
  expiresAt  DateTime

  // Verification attempts
  attempts    Int       @default(0)
  lastAttempt DateTime?
  lastError   String?

  // DNS records
  dnsRecords Json @default("[]")

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())

  subscription WhiteLabelSubscription @relation(fields: [subscriptionId], references: [id])

  @@unique([subscriptionId, domain])
  @@index([verifyToken])
  @@index([verified])
  @@map("domain_verifications")
  @@schema("public")
}

// Platform User Management
model TenantUser {
  id       String     @id @default(uuid()) @db.Uuid
  tenantId String     @db.Uuid
  email    String     @unique
  password String
  role     TenantRole
  status   UserStatus @default(ACTIVE)

  // Profile
  firstName   String?
  lastName    String?
  phoneNumber String?
  avatar      String?

  // Preferences
  preferredLanguage String @default("id")
  timezone          String @default("Asia/Jakarta")

  // Security
  twoFactorEnabled Boolean   @default(false)
  twoFactorSecret  String?
  lastLoginAt      DateTime?
  lastLoginIp      String?
  failedLoginCount Int       @default(0)
  lockedUntil      DateTime?

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant      Tenant                 @relation(fields: [tenantId], references: [id])
  sessions    TenantSession[]
  auditLogs   PlatformAuditLog[]
  permissions TenantUserPermission[]

  @@index([tenantId])
  @@index([email])
  @@index([status])
  @@map("tenant_users")
  @@schema("public")
}

model TenantSession {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @db.Uuid
  token        String   @unique
  ipAddress    String?
  userAgent    String?
  lastActivity DateTime
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  user TenantUser @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([expiresAt])
  @@map("tenant_sessions")
  @@schema("public")
}

// Fine-grained permissions
model TenantUserPermission {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @db.Uuid
  resource  String // e.g., "school", "invoice", "report"
  action    String // e.g., "create", "read", "update", "delete"
  scope     String? // e.g., specific school ID or "*" for all
  granted   Boolean   @default(true)
  grantedBy String    @db.Uuid
  grantedAt DateTime  @default(now())
  expiresAt DateTime?

  user TenantUser @relation(fields: [userId], references: [id])

  @@unique([userId, resource, action, scope])
  @@index([userId])
  @@map("tenant_user_permissions")
  @@schema("public")
}

// Price History
model PriceHistory {
  id       String @id @default(uuid()) @db.Uuid
  tenantId String @db.Uuid

  changeType    PriceChangeType
  previousValue Json
  newValue      Json

  reason        String
  approvedBy    String   @db.Uuid
  effectiveDate DateTime

  // Impact analysis
  affectedStudents Int
  monthlyImpact    Decimal @db.Decimal(12, 2)

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())

  @@index([tenantId])
  @@index([effectiveDate])
  @@map("price_history")
  @@schema("public")
}

// Integration Management
model TenantIntegration {
  id         String            @id @default(uuid()) @db.Uuid
  tenantId   String            @db.Uuid
  type       IntegrationType
  name       String
  config     Json // Encrypted
  status     IntegrationStatus @default(INACTIVE)
  lastSyncAt DateTime?

  // Rate limiting
  apiCallsToday Int @default(0)
  apiCallLimit  Int @default(10000)

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@unique([tenantId, type])
  @@index([status])
  @@map("tenant_integrations")
  @@schema("public")
}

model SchoolIntegration {
  id          String            @id @default(uuid()) @db.Uuid
  schoolId    String            @db.Uuid
  type        IntegrationType
  name        String
  config      Json // Encrypted
  credentials Json // Encrypted
  status      IntegrationStatus @default(INACTIVE)

  // External system mapping
  externalSystemId String?
  lastSyncAt       DateTime?

  // Sync configuration
  syncEnabled    Boolean @default(true)
  syncFrequency  String  @default("DAILY") // REALTIME, HOURLY, DAILY
  lastSyncStatus String?
  lastSyncError  String?

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school School @relation(fields: [schoolId], references: [id])

  @@unique([schoolId, type])
  @@index([status])
  @@map("school_integrations")
  @@schema("public")
}

// API Management
model TenantApiKey {
  id        String @id @default(uuid()) @db.Uuid
  tenantId  String @db.Uuid
  name      String
  key       String @unique
  hashedKey String @unique // For security

  // Permissions
  scopes String[] // ["read:students", "write:payments", etc.]

  // Rate limiting
  rateLimit Int @default(1000) // Requests per hour

  // IP restrictions
  allowedIps String[] @default([])

  // Lifecycle
  lastUsedAt DateTime?
  expiresAt  DateTime?
  revokedAt  DateTime?
  revokedBy  String?   @db.Uuid

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  createdBy String   @db.Uuid

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
  @@index([hashedKey])
  @@map("tenant_api_keys")
  @@schema("public")
}

// Audit Logging
model PlatformAuditLog {
  id         String  @id @default(uuid()) @db.Uuid
  platformId String? @db.Uuid
  tenantId   String? @db.Uuid
  userId     String? @db.Uuid

  action     String
  resource   String
  resourceId String?

  // Change tracking
  oldData Json?
  newData Json?

  // Context
  ipAddress String?
  userAgent String?

  // Additional info
  severity AuditSeverity @default(INFO)
  tags     String[]      @default([])

  // Metadata
  metadata  Json?
  createdAt DateTime @default(now())

  platform Platform?   @relation(fields: [platformId], references: [id])
  user     TenantUser? @relation(fields: [userId], references: [id])

  @@index([platformId])
  @@index([tenantId])
  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
  @@index([severity])
  @@map("platform_audit_logs")
  @@schema("public")
}

// Platform Settings (Key-Value)
model PlatformSetting {
  id         String @id @default(uuid()) @db.Uuid
  platformId String @db.Uuid
  key        String
  value      Json

  // Setting metadata
  dataType   String  @default("string") // string, number, boolean, json
  isPublic   Boolean @default(false) // Visible to tenants
  isEditable Boolean @default(true) // Can be changed via UI

  // Metadata
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  updatedBy   String?  @db.Uuid

  platform Platform @relation(fields: [platformId], references: [id])

  @@unique([platformId, key])
  @@index([key])
  @@map("platform_settings")
  @@schema("public")
}

// Subscription Addons
model SubscriptionAddon {
  id             String @id @default(uuid()) @db.Uuid
  subscriptionId String @db.Uuid
  addonType      String // "extra_storage", "priority_support", etc.

  // Addon details
  name       String
  quantity   Int     @default(1)
  unitPrice  Decimal @db.Decimal(10, 2)
  totalPrice Decimal @db.Decimal(12, 2)

  // Billing
  billingCycle    BillingCycle @default(MONTHLY)
  nextBillingDate DateTime

  // Status
  status      AddonStatus @default(ACTIVE)
  activatedAt DateTime    @default(now())
  cancelledAt DateTime?

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscription Subscription @relation(fields: [subscriptionId], references: [id])

  @@index([subscriptionId])
  @@index([status])
  @@map("subscription_addons")
  @@schema("public")
}

// InstallmentPlan (kept at platform level for reusability)
model InstallmentPlan {
  id          String  @id @default(uuid()) @db.Uuid
  schoolId    String  @db.Uuid
  name        String
  code        String  @unique
  description String?

  // Plan configuration
  installments   Int // Number of installments
  interestRate   Decimal @default(0) @db.Decimal(5, 4) // Monthly interest
  lateFeeRate    Decimal @default(0) @db.Decimal(5, 4) // Late fee percentage
  minDownPayment Decimal @default(0) @db.Decimal(5, 2) // Minimum DP %

  // Payment rules
  allowPartial    Boolean @default(false)
  gracePeriodDays Int     @default(0)

  // Status
  status BaseStatus @default(ACTIVE)

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school        School         @relation(fields: [schoolId], references: [id])
  feeStructures FeeStructure[]

  @@index([schoolId])
  @@index([status])
  @@map("installment_plans")
  @@schema("public")
}

model StudentLicense {
  id        String @id @default(uuid())
  tenantId  String
  studentId String @unique

  activatedAt   DateTime
  deactivatedAt DateTime?
  billedUntil   DateTime

  // For proration
  daysActive  Int
  monthlyRate Decimal

  @@index([tenantId, activatedAt])
  @@map("student_licenses")
  @@schema("public")
}

model BillingMetrics {
  id       String   @id @default(uuid())
  tenantId String
  month    DateTime

  // Student counts
  startingStudents Int
  endingStudents   Int
  peakStudents     Int
  averageStudents  Float

  // Churn metrics
  studentsAdded   Int
  studentsRemoved Int

  // Billing
  billableStudents Int
  proratedDays     Json // Per-student proration

  @@unique([tenantId, month])
  @@map("billing_metrics")
  @@schema("public")
}

// ==================== TENANT LEVEL (tenant schema) ====================
// Each school has its own tenant schema

// User Management
model User {
  id       String     @id @default(uuid()) @db.Uuid
  schoolId String     @db.Uuid
  email    String     @unique
  username String?    @unique
  password String
  role     UserRole
  status   UserStatus @default(ACTIVE)

  // Contact info
  phoneNumber   String?
  phoneVerified Boolean @default(false)
  emailVerified Boolean @default(false)

  // Preferences
  preferredLanguage String @default("id")
  timezone          String @default("Asia/Jakarta")

  // Security
  twoFactorEnabled  Boolean   @default(false)
  twoFactorSecret   String?
  lastLoginAt       DateTime?
  lastLoginIp       String?
  failedLoginCount  Int       @default(0)
  lockedUntil       DateTime?
  passwordChangedAt DateTime?

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  profile              UserProfile?
  sessions             Session[]
  auditLogs            AuditLog[]
  notifications        Notification[]
  notificationSettings NotificationSetting[]

  // Role-specific relations
  teacherProfile Teacher?
  studentProfile Student?
  parentProfile  Parent?
  staffProfile   Staff?

  // Activity tracking
  languageHistory UserLanguageHistory[]
  loginHistory    LoginHistory[]

  @@index([schoolId])
  @@index([email])
  @@index([role])
  @@index([status])
  @@map("users")
  @@schema("tenant")
}

model UserProfile {
  id     String @id @default(uuid()) @db.Uuid
  userId String @unique @db.Uuid

  // Personal info
  firstName   String
  lastName    String
  displayName String?
  avatar      String?
  dateOfBirth DateTime?
  gender      Gender?

  // Address (structured)
  address Json?
  /**
   * {
   * "street": "Jl. Sudirman No. 123",
   * "rt": "001",
   * "rw": "002",
   * "village": "Kelurahan",
   * "district": "Kecamatan",
   * "city": "Kota",
   * "province": "Provinsi",
   * "postalCode": "12345",
   * "country": "ID"
   * }
   */

  // Emergency contact
  emergencyContact Json?
  /**
   * {
   * "name": "Contact Name",
   * "relationship": "Mother",
   * "phone": "+62812345678",
   * "email": "contact@email.com",
   * "address": {...}
   * }
   */

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
  @@schema("tenant")
}

// Enhanced Student Management
model Student {
  id                  String  @id @default(uuid()) @db.Uuid
  userId              String  @unique @db.Uuid
  schoolId            String  @db.Uuid
  currentEnrollmentId String? @unique @db.Uuid

  // Student identifiers
  studentNumber      String  @unique
  nisn               String? @unique // National Student Number
  nik                String? // National ID
  birthCertificateNo String?

  // Admission info
  admissionDate   DateTime
  admissionNumber String?
  admissionType   String? // New, Transfer, Re-admission
  previousSchool  Json?

  // Personal info
  bloodType   String?
  religion    String?
  nationality String  @default("ID")

  // Special needs
  hasSpecialNeeds Boolean @default(false)
  specialNeeds    Json?

  // Health info
  healthInfo Json?
  /**
   * {
   * "allergies": ["peanuts", "dust"],
   * "medications": ["inhaler"],
   * "conditions": ["asthma"],
   * "emergencyMedical": "...",
   * "insuranceProvider": "BPJS",
   * "insuranceNumber": "..."
   * }
   */

  // Status
  status         StudentStatus @default(ACTIVE)
  graduationDate DateTime?
  exitReason     String?

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations
  currentEnrollment Enrollment?            @relation("CurrentEnrollment", fields: [currentEnrollmentId], references: [id])
  enrollments       Enrollment[]           @relation("StudentEnrollments")
  attendances       StudentAttendance[]
  academicRecords   AcademicRecord[]
  assessments       StudentAssessment[]
  disciplineRecords DisciplineRecord[]
  achievements      Achievement[]
  parentRelations   StudentParent[]
  dailyActivities   StudentDailyActivity[]
  healthRecords     HealthRecord[]
  counselingRecords CounselingRecord[]

  // Financial relations
  feeAssignments   FeeAssignment[]
  payments         Payment[]
  paymentReminders PaymentReminder[]
  scholarships     StudentScholarship[]

  // Communication
  parentTeacherMessages ParentTeacherMessage[]
  parentConsents        ParentConsent[]

  @@index([schoolId])
  @@index([studentNumber])
  @@index([nisn])
  @@index([status])
  @@map("students")
  @@schema("tenant")
}

// Enhanced Parent Management
model Parent {
  id     String @id @default(uuid()) @db.Uuid
  userId String @unique @db.Uuid

  // Personal info
  nik           String? @unique
  occupation    String?
  employer      String?
  workAddress   Json?
  income        String? // Encrypted
  education     String?
  maritalStatus String?

  // Communication preferences
  preferences Json @default("{}")
  /**
   * {
   * "communicationChannel": "whatsapp",
   * "notificationTime": "19:00",
   * "weekendNotifications": false,
   * "photoSharing": true,
   * "language": "id",
   * "digestFrequency": "weekly"
   * }
   */

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user                User                          @relation(fields: [userId], references: [id], onDelete: Cascade)
  studentRelations    StudentParent[]
  portalMetrics       ParentPortalMetrics?
  notificationPrefs   ParentNotificationPreference?
  consents            ParentConsent[]
  paymentMethods      ParentPaymentMethod[]
  paymentConsents     PaymentConsent[]
  paymentReminders    PaymentReminder[]
  feedbackSubmissions ParentFeedback[]

  @@index([nik])
  @@map("parents")
  @@schema("tenant")
}

model StudentParent {
  id           String             @id @default(uuid()) @db.Uuid
  studentId    String             @db.Uuid
  parentId     String             @db.Uuid
  relationship ParentRelationship

  // Guardian info
  isPrimary                  Boolean @default(false)
  hasLegalGuardian           Boolean @default(false)
  hasFinancialResponsibility Boolean @default(true)
  hasCustody                 Boolean @default(true)

  // Emergency contact priority
  emergencyPriority Int @default(1)

  // Access control
  canViewGrades     Boolean @default(true)
  canViewAttendance Boolean @default(true)
  canViewFinancial  Boolean @default(true)
  canMakePayments   Boolean @default(true)

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  parent  Parent  @relation(fields: [parentId], references: [id], onDelete: Cascade)

  @@unique([studentId, parentId])
  @@index([isPrimary])
  @@map("student_parents")
  @@schema("tenant")
}

// Enhanced Teacher Management
model Teacher {
  id     String @id @default(uuid()) @db.Uuid
  userId String @unique @db.Uuid

  // Employee info
  employeeNumber String  @unique
  nip            String? @unique // Government Employee Number
  nuptk          String? @unique // Teacher Registration Number

  // Professional info
  qualification   String
  degree          String?
  major           String?
  certifications  Json          @default("[]")
  specializations String[]
  teachingLevels  SchoolLevel[] // Can teach multiple levels

  // Employment
  joinDate       DateTime
  employmentType EmploymentType
  department     String?
  position       String?
  salary         Decimal?       @db.Decimal(12, 2) // Encrypted

  // Status
  status TeacherStatus @default(ACTIVE)

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Teaching assignments
  classTeacher Class[]          @relation("ClassTeacher")
  subjects     SubjectTeacher[]
  schedules    Schedule[]

  // Activities
  attendances        TeacherAttendance[]
  leaves             Leave[]
  performanceReviews PerformanceReview[]

  // Academic
  assessmentsCreated Assessment[]
  lessonsPlanned     LessonPlan[]

  @@index([employeeNumber])
  @@index([nip])
  @@index([nuptk])
  @@index([status])
  @@map("teachers")
  @@schema("tenant")
}

// Staff Management
model Staff {
  id     String @id @default(uuid()) @db.Uuid
  userId String @unique @db.Uuid

  // Employee info
  employeeNumber String  @unique
  nip            String? @unique

  // Work info
  department  String
  position    String
  level       String? // Junior, Senior, Manager, etc.
  reportingTo String? @db.Uuid // Manager ID

  // Employment
  joinDate       DateTime
  employmentType EmploymentType
  salary         Decimal?       @db.Decimal(12, 2) // Encrypted

  // Status
  status StaffStatus @default(ACTIVE)

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  attendances        StaffAttendance[]
  leaves             Leave[]
  performanceReviews PerformanceReview[]

  @@index([employeeNumber])
  @@index([department])
  @@index([status])
  @@map("staff")
  @@schema("tenant")
}

// Academic Structure
model AcademicYear {
  id        String   @id @default(uuid()) @db.Uuid
  schoolId  String   @db.Uuid
  name      String // "2024/2025"
  startDate DateTime
  endDate   DateTime

  // Status
  isActive  Boolean @default(false)
  isCurrent Boolean @default(false) // Currently running

  // Configuration
  config Json @default("{}")
  /**
   * {
   * "holidayDates": ["2024-12-25", "2025-01-01"],
   * "examPeriods": [
   * {"type": "MID_TERM_1", "start": "2024-10-01", "end": "2024-10-15"},
   * {"type": "FINAL_1", "start": "2024-12-01", "end": "2024-12-15"}
   * ],
   * "reportCardDates": {
   * "term1": "2024-12-20",
   * "term2": "2025-06-20"
   * }
   * }
   */

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  terms         AcademicTerm[]
  enrollments   Enrollment[]
  classes       Class[]
  feeStructures FeeStructure[]
  events        AcademicEvent[]

  @@unique([schoolId, name])
  @@index([isActive])
  @@index([isCurrent])
  @@index([schoolId])
  @@map("academic_years")
  @@schema("tenant")
}

model AcademicTerm {
  id             String   @id @default(uuid()) @db.Uuid
  academicYearId String   @db.Uuid
  name           String // "Semester 1", "Term 1", etc.
  termNumber     Int
  startDate      DateTime
  endDate        DateTime

  // Status
  isActive  Boolean @default(false)
  isCurrent Boolean @default(false)

  // Important dates
  midtermStart            DateTime?
  midtermEnd              DateTime?
  finalExamStart          DateTime?
  finalExamEnd            DateTime?
  gradeSubmissionDeadline DateTime?
  reportCardDate          DateTime?

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicYear    AcademicYear     @relation(fields: [academicYearId], references: [id])
  academicRecords AcademicRecord[]
  reportCards     ReportCard[]
  assessments     Assessment[]
  schedules       Schedule[]

  @@unique([academicYearId, termNumber])
  @@index([isActive])
  @@index([isCurrent])
  @@map("academic_terms")
  @@schema("tenant")
}

// Enhanced Grade & Class Management
model Grade {
  id       String      @id @default(uuid()) @db.Uuid
  schoolId String      @db.Uuid
  level    SchoolLevel
  name     String // "Grade 1", "Kelas 1", etc.
  code     String // "G1", "K1", etc.
  order    Int // For sorting

  // Grade configuration
  minAge Int? // Minimum age for enrollment
  maxAge Int? // Maximum age for enrollment

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  classes             Class[]
  subjects            Subject[]
  curricula           GradeCurriculum[]
  enrollments         Enrollment[]
  previousEnrollments Enrollment[]       @relation("PreviousGrade")
  feeStructures       FeeStructure[]
  gradeTranslations   GradeTranslation[]

  @@unique([schoolId, code])
  @@index([level])
  @@index([schoolId])
  @@index([order])
  @@map("grades")
  @@schema("tenant")
}

model Class {
  id             String @id @default(uuid()) @db.Uuid
  gradeId        String @db.Uuid
  academicYearId String @db.Uuid
  name           String // "1A", "1B", etc.
  code           String @unique

  // Capacity management
  capacity    Int
  currentSize Int @default(0)
  minSize     Int @default(10) // Minimum students to keep class open

  // Assignments
  homeTeacherId      String? @db.Uuid
  assistantTeacherId String? @db.Uuid
  roomId             String? @db.Uuid

  // Class configuration
  shift String? // "Morning", "Afternoon"

  // Status
  status BaseStatus @default(ACTIVE)

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  grade        Grade        @relation(fields: [gradeId], references: [id])
  homeTeacher  Teacher?     @relation("ClassTeacher", fields: [homeTeacherId], references: [id])
  room         Room?        @relation(fields: [roomId], references: [id])
  academicYear AcademicYear @relation(fields: [academicYearId], references: [id])

  enrollments     Enrollment[]
  schedules       Schedule[]
  classActivities ClassActivity[]
  LessonPlan      LessonPlan[]
  Assessment      Assessment[]

  @@index([gradeId])
  @@index([academicYearId])
  @@index([status])
  @@index([homeTeacherId])
  @@map("classes")
  @@schema("tenant")
}

// Curriculum & Subjects
model Curriculum {
  id          String         @id @default(uuid()) @db.Uuid
  schoolId    String         @db.Uuid
  name        String
  code        String
  type        CurriculumType
  description String?

  // Curriculum details
  version    String?
  validFrom  DateTime?
  validUntil DateTime?

  // Status
  isActive  Boolean @default(true)
  isDefault Boolean @default(false)

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  gradeCurricula GradeCurriculum[]
  competencies   Competency[]

  @@unique([schoolId, code])
  @@index([type])
  @@index([isActive])
  @@index([schoolId])
  @@map("curricula")
  @@schema("tenant")
}

model GradeCurriculum {
  id           String @id @default(uuid()) @db.Uuid
  gradeId      String @db.Uuid
  curriculumId String @db.Uuid

  // Configuration
  config Json @default("{}")

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  grade      Grade      @relation(fields: [gradeId], references: [id])
  curriculum Curriculum @relation(fields: [curriculumId], references: [id])

  @@unique([gradeId, curriculumId])
  @@map("grade_curricula")
  @@schema("tenant")
}

model Subject {
  id       String          @id @default(uuid()) @db.Uuid
  gradeId  String          @db.Uuid
  code     String
  name     Json // Multilingual
  category SubjectCategory

  // Subject configuration
  creditHours  Int
  passingGrade Int
  weight       Int @default(1) // For GPA calculation

  // Subject type
  isCore      Boolean @default(true)
  isMandatory Boolean @default(true)

  // Dependencies
  prerequisites String[] @default([]) // Subject codes

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  grade               Grade                @relation(fields: [gradeId], references: [id])
  teachers            SubjectTeacher[]
  schedules           Schedule[]
  assessments         Assessment[]
  academicRecords     AcademicRecord[]
  lessonPlans         LessonPlan[]
  subjectTranslations SubjectTranslation[]
  competencies        SubjectCompetency[]

  @@unique([gradeId, code])
  @@index([category])
  @@index([gradeId])
  @@map("subjects")
  @@schema("tenant")
}

model SubjectTeacher {
  id        String @id @default(uuid()) @db.Uuid
  subjectId String @db.Uuid
  teacherId String @db.Uuid

  // Role
  isPrimary Boolean @default(false)
  isActive  Boolean @default(true)

  // Assignment period
  startDate DateTime  @default(now())
  endDate   DateTime?

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subject Subject @relation(fields: [subjectId], references: [id])
  teacher Teacher @relation(fields: [teacherId], references: [id])

  @@unique([subjectId, teacherId])
  @@index([teacherId])
  @@index([isActive])
  @@map("subject_teachers")
  @@schema("tenant")
}

// Competency Management (for Kurikulum Merdeka)
model Competency {
  id           String         @id @default(uuid()) @db.Uuid
  curriculumId String         @db.Uuid
  code         String
  name         String
  description  String?
  type         CompetencyType // KNOWLEDGE, SKILL, ATTITUDE

  // Hierarchy
  parentId String? @db.Uuid
  level    Int     @default(1)
  order    Int     @default(0)

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  curriculum          Curriculum          @relation(fields: [curriculumId], references: [id])
  parent              Competency?         @relation("CompetencyHierarchy", fields: [parentId], references: [id])
  children            Competency[]        @relation("CompetencyHierarchy")
  subjectCompetencies SubjectCompetency[]

  @@unique([curriculumId, code])
  @@index([type])
  @@index([parentId])
  @@map("competencies")
  @@schema("tenant")
}

model SubjectCompetency {
  id           String @id @default(uuid()) @db.Uuid
  subjectId    String @db.Uuid
  competencyId String @db.Uuid

  // Weight for this competency in the subject
  weight Int @default(1)

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subject    Subject    @relation(fields: [subjectId], references: [id])
  competency Competency @relation(fields: [competencyId], references: [id])

  @@unique([subjectId, competencyId])
  @@map("subject_competencies")
  @@schema("tenant")
}

// Enhanced Enrollment Management
model Enrollment {
  id             String @id @default(uuid()) @db.Uuid
  studentId      String @db.Uuid
  academicYearId String @db.Uuid
  gradeId        String @db.Uuid
  classId        String @db.Uuid

  // Enrollment details
  enrollmentDate DateTime
  enrollmentType String   @default("REGULAR") // REGULAR, TRANSFER, RE_ADMISSION

  // Academic tracking
  completionDate DateTime?
  status         EnrollmentStatus @default(ACTIVE)

  // Grade progression
  isPromotion     Boolean        @default(false)
  previousGradeId String?        @db.Uuid
  promotionType   PromotionType?

  // Performance summary
  finalGPA        Decimal? @db.Decimal(4, 2)
  finalAttendance Decimal? @db.Decimal(5, 2)
  completionNote  String?

  // Approval workflow
  approvedBy String?   @db.Uuid
  approvedAt DateTime?

  // Special programs
  specialPrograms String[] @default([])

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student       Student      @relation("StudentEnrollments", fields: [studentId], references: [id])
  academicYear  AcademicYear @relation(fields: [academicYearId], references: [id])
  grade         Grade        @relation(fields: [gradeId], references: [id])
  class         Class        @relation(fields: [classId], references: [id])
  previousGrade Grade?       @relation("PreviousGrade", fields: [previousGradeId], references: [id])

  // Reverse relation for current enrollment
  currentForStudent Student? @relation("CurrentEnrollment")

  @@unique([studentId, academicYearId])
  @@index([status])
  @@index([academicYearId])
  @@index([gradeId])
  @@index([classId])
  @@index([isPromotion])
  @@map("enrollments")
  @@schema("tenant")
}

// Academic Records & Grading
model AcademicRecord {
  id        String @id @default(uuid()) @db.Uuid
  studentId String @db.Uuid
  termId    String @db.Uuid
  subjectId String @db.Uuid

  // Grades
  finalGrade  Decimal @db.Decimal(5, 2)
  letterGrade String?
  gpa         Decimal @db.Decimal(4, 2)
  credits     Int

  // Grade breakdown
  gradeBreakdown Json @default("{}")
  /**
   * {
   * "daily": 85,
   * "assignment": 88,
   * "midterm": 82,
   * "final": 90,
   * "project": 87
   * }
   */

  // Teacher comments
  teacherComments String?

  // Status
  status RecordStatus @default(DRAFT)

  // Approval
  submittedBy String?   @db.Uuid
  submittedAt DateTime?
  approvedBy  String?   @db.Uuid
  approvedAt  DateTime?

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student Student      @relation(fields: [studentId], references: [id])
  term    AcademicTerm @relation(fields: [termId], references: [id])
  subject Subject      @relation(fields: [subjectId], references: [id])

  @@unique([studentId, termId, subjectId])
  @@index([status])
  @@index([termId])
  @@index([studentId])
  @@map("academic_records")
  @@schema("tenant")
}

// Enhanced Assessment System
model Assessment {
  id        String @id @default(uuid()) @db.Uuid
  subjectId String @db.Uuid
  classId   String @db.Uuid
  teacherId String @db.Uuid
  termId    String @db.Uuid

  // Assessment info
  name     String
  type     AssessmentType
  category String? // Sub-category

  // Scoring
  weight       Decimal @db.Decimal(5, 2)
  totalMarks   Int
  passingMarks Int

  // Schedule
  scheduledDate DateTime
  duration      Int? // Minutes
  dueDate       DateTime?

  // Instructions & resources
  instructions String?
  attachments  Json?
  rubric       Json? // Grading rubric

  // Settings
  allowLateSubmission Boolean  @default(false)
  latePenalty         Decimal? @db.Decimal(5, 2) // Percentage
  showResults         Boolean  @default(true)

  // Status
  status      AssessmentStatus @default(DRAFT)
  publishedAt DateTime?

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subject            Subject              @relation(fields: [subjectId], references: [id])
  class              Class                @relation(fields: [classId], references: [id])
  teacher            Teacher              @relation(fields: [teacherId], references: [id])
  term               AcademicTerm         @relation(fields: [termId], references: [id])
  studentAssessments StudentAssessment[]
  questions          AssessmentQuestion[]

  @@index([subjectId])
  @@index([classId])
  @@index([teacherId])
  @@index([type])
  @@index([status])
  @@index([termId])
  @@index([scheduledDate])
  @@map("assessments")
  @@schema("tenant")
}

model StudentAssessment {
  id           String @id @default(uuid()) @db.Uuid
  assessmentId String @db.Uuid
  studentId    String @db.Uuid

  // Submission
  submittedAt DateTime?
  submission  Json? // Answer data
  attachments Json?

  // Grading
  score       Decimal?  @db.Decimal(5, 2)
  letterGrade String?
  feedback    String?
  gradedAt    DateTime?
  gradedBy    String?   @db.Uuid

  // Status
  status   SubmissionStatus @default(PENDING)
  attempts Int              @default(0)

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assessment Assessment @relation(fields: [assessmentId], references: [id])
  student    Student    @relation(fields: [studentId], references: [id])

  @@unique([assessmentId, studentId])
  @@index([status])
  @@index([studentId])
  @@map("student_assessments")
  @@schema("tenant")
}

// Assessment Questions (for online assessments)
model AssessmentQuestion {
  id           String @id @default(uuid()) @db.Uuid
  assessmentId String @db.Uuid

  // Question details
  questionNumber Int
  questionType   String // MULTIPLE_CHOICE, ESSAY, TRUE_FALSE, etc.
  question       Json // Rich text with images
  options        Json? // For multiple choice
  correctAnswer  Json? // Encrypted

  // Scoring
  points        Int
  partialCredit Boolean @default(false)

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assessment Assessment @relation(fields: [assessmentId], references: [id])

  @@unique([assessmentId, questionNumber])
  @@index([assessmentId])
  @@map("assessment_questions")
  @@schema("tenant")
}

// Enhanced Attendance System
model StudentAttendance {
  id         String   @id @default(uuid()) @db.Uuid
  studentId  String   @db.Uuid
  date       DateTime @db.Date
  scheduleId String?  @db.Uuid

  // Attendance details
  status       AttendanceStatus
  checkInTime  DateTime?
  checkOutTime DateTime?
  checkInBy    String?          @db.Uuid // Staff/system that recorded
  checkOutBy   String?          @db.Uuid

  // Time tracking
  lateMinutes       Int @default(0)
  earlyLeaveMinutes Int @default(0)

  // Reason & verification
  reason      String?
  attachments Json? // Supporting documents
  verifiedBy  String?   @db.Uuid
  verifiedAt  DateTime?

  // Parent notification
  parentNotified   Boolean   @default(false)
  parentNotifiedAt DateTime?

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student  Student   @relation(fields: [studentId], references: [id])
  schedule Schedule? @relation(fields: [scheduleId], references: [id])

  @@unique([studentId, date, scheduleId])
  @@index([date])
  @@index([status])
  @@index([studentId])
  @@map("student_attendances")
  @@schema("tenant")
}

model TeacherAttendance {
  id        String   @id @default(uuid()) @db.Uuid
  teacherId String   @db.Uuid
  date      DateTime @db.Date

  // Check in/out
  checkInTime      DateTime?
  checkOutTime     DateTime?
  checkInLocation  Json? // GPS coordinates
  checkOutLocation Json?

  // Status
  status AttendanceStatus

  // Time tracking
  lateMinutes     Int    @default(0)
  overtimeMinutes Int    @default(0)
  totalHours      Float? @db.Real

  // Verification
  verifiedBy String?   @db.Uuid
  verifiedAt DateTime?

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacher Teacher @relation(fields: [teacherId], references: [id])

  @@unique([teacherId, date])
  @@index([date])
  @@index([status])
  @@map("teacher_attendances")
  @@schema("tenant")
}

model StaffAttendance {
  id      String   @id @default(uuid()) @db.Uuid
  staffId String   @db.Uuid
  date    DateTime @db.Date

  // Check in/out
  checkInTime      DateTime?
  checkOutTime     DateTime?
  checkInLocation  Json?
  checkOutLocation Json?

  // Status
  status AttendanceStatus

  // Time tracking
  lateMinutes     Int    @default(0)
  overtimeMinutes Int    @default(0)
  totalHours      Float? @db.Real

  // Verification
  verifiedBy String?   @db.Uuid
  verifiedAt DateTime?

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  staff Staff @relation(fields: [staffId], references: [id])

  @@unique([staffId, date])
  @@index([date])
  @@index([status])
  @@map("staff_attendances")
  @@schema("tenant")
}

// Leave Management
model Leave {
  id        String  @id @default(uuid()) @db.Uuid
  teacherId String? @db.Uuid
  staffId   String? @db.Uuid

  // Leave details
  type      LeaveType
  startDate DateTime
  endDate   DateTime
  totalDays Float // Can be 0.5 for half day
  reason    String

  // Supporting documents
  attachments Json?

  // Approval workflow
  status     LeaveStatus @default(PENDING)
  approvedBy String?     @db.Uuid
  approvedAt DateTime?
  rejectedBy String?     @db.Uuid
  rejectedAt DateTime?
  comments   String?

  // Substitute arrangement
  substituteId    String? @db.Uuid
  substituteNotes String?

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacher Teacher? @relation(fields: [teacherId], references: [id])
  staff   Staff?   @relation(fields: [staffId], references: [id])

  @@index([status])
  @@index([startDate, endDate])
  @@index([teacherId])
  @@index([staffId])
  @@map("leaves")
  @@schema("tenant")
}

// Schedule Management
model Schedule {
  id        String @id @default(uuid()) @db.Uuid
  classId   String @db.Uuid
  subjectId String @db.Uuid
  teacherId String @db.Uuid
  roomId    String @db.Uuid
  termId    String @db.Uuid

  // Schedule details
  dayOfWeek Int // 0-6 (Sunday-Saturday)
  startTime DateTime @db.Time
  endTime   DateTime @db.Time

  // Recurrence
  isRecurring    Boolean @default(true)
  recurrenceRule String? // RFC 5545 RRULE

  // Effective dates
  effectiveFrom  DateTime  @default(now())
  effectiveUntil DateTime?

  // Status
  isActive Boolean @default(true)

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  class       Class                @relation(fields: [classId], references: [id])
  subject     Subject              @relation(fields: [subjectId], references: [id])
  teacher     Teacher              @relation(fields: [teacherId], references: [id])
  room        Room                 @relation(fields: [roomId], references: [id])
  term        AcademicTerm         @relation(fields: [termId], references: [id])
  attendances StudentAttendance[]
  substitutes ScheduleSubstitute[]

  @@index([classId])
  @@index([teacherId])
  @@index([dayOfWeek])
  @@index([termId])
  @@index([isActive])
  @@map("schedules")
  @@schema("tenant")
}

model ScheduleSubstitute {
  id         String   @id @default(uuid()) @db.Uuid
  scheduleId String   @db.Uuid
  date       DateTime @db.Date

  // Substitute details
  substituteTeacherId String? @db.Uuid
  substituteRoomId    String? @db.Uuid
  isCancelled         Boolean @default(false)

  // Reason
  reason String

  // Notification
  studentsNotified Boolean @default(false)
  parentsNotified  Boolean @default(false)

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  schedule Schedule @relation(fields: [scheduleId], references: [id])

  @@unique([scheduleId, date])
  @@index([date])
  @@map("schedule_substitutes")
  @@schema("tenant")
}

// Facility Management
model Building {
  id       String @id @default(uuid()) @db.Uuid
  schoolId String @db.Uuid
  name     String
  code     String @unique

  // Building details
  floors    Int
  totalArea Float? // Square meters
  yearBuilt Int?

  // Status
  status BaseStatus @default(ACTIVE)

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rooms           Room[]
  maintenanceLogs MaintenanceLog[]

  @@index([schoolId])
  @@index([status])
  @@map("buildings")
  @@schema("tenant")
}

model Room {
  id         String @id @default(uuid()) @db.Uuid
  buildingId String @db.Uuid
  name       String
  code       String @unique

  // Room details
  type     RoomType
  capacity Int
  area     Float? // Square meters
  floor    Int

  // Facilities
  facilities Json @default("[]")
  /**
   * [
   * {"name": "AC", "quantity": 2, "condition": "good"},
   * {"name": "Projector", "quantity": 1, "condition": "excellent"},
   * {"name": "Whiteboard", "quantity": 1, "condition": "fair"}
   * ]
   */

  // Status
  status RoomStatus @default(AVAILABLE)

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  building        Building         @relation(fields: [buildingId], references: [id])
  classes         Class[]
  schedules       Schedule[]
  maintenanceLogs MaintenanceLog[]
  roomBookings    RoomBooking[]

  @@index([type])
  @@index([status])
  @@index([buildingId])
  @@map("rooms")
  @@schema("tenant")
}

model RoomBooking {
  id     String @id @default(uuid()) @db.Uuid
  roomId String @db.Uuid

  // Booking details
  purpose   String
  date      DateTime @db.Date
  startTime DateTime @db.Time
  endTime   DateTime @db.Time

  // Requester
  requestedBy  String  @db.Uuid
  requestedFor String? // Event/class name

  // Approval
  status     BookingStatus @default(PENDING)
  approvedBy String?       @db.Uuid
  approvedAt DateTime?

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  room Room @relation(fields: [roomId], references: [id])

  @@unique([roomId, date, startTime])
  @@index([date])
  @@index([status])
  @@map("room_bookings")
  @@schema("tenant")
}

// Financial Management
model FeeStructure {
  id                String  @id @default(uuid()) @db.Uuid
  schoolId          String  @db.Uuid
  academicYearId    String  @db.Uuid
  gradeId           String  @db.Uuid
  installmentPlanId String? @db.Uuid

  // Fee details
  name      String
  code      String
  amount    Decimal      @db.Decimal(12, 2)
  type      FeeType
  frequency FeeFrequency
  category  String? // Additional categorization

  // Payment schedule
  dueDay   Int? // Day of month
  dueDates DateTime[] // Specific due dates

  // Fee rules
  isOptional   Boolean @default(false)
  isRefundable Boolean @default(false)
  conditions   Json? // Conditions for applicability

  // Display settings
  displayName  Json // Multilingual
  displayOrder Int     @default(0)
  description  String?

  // Payment options
  allowPartialPayment  Boolean  @default(false)
  minPaymentAmount     Decimal? @db.Decimal(12, 2)
  earlyPaymentDiscount Decimal? @db.Decimal(5, 2) // Percentage

  // Status
  isActive Boolean @default(true)

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicYear    AcademicYear     @relation(fields: [academicYearId], references: [id])
  grade           Grade            @relation(fields: [gradeId], references: [id])
  installmentPlan InstallmentPlan? @relation(fields: [installmentPlanId], references: [id])
  feeAssignments  FeeAssignment[]
  feeWaivers      FeeWaiver[]

  @@unique([schoolId, academicYearId, gradeId, code])
  @@index([type])
  @@index([schoolId])
  @@index([academicYearId])
  @@index([gradeId])
  @@index([isActive])
  @@map("fee_structures")
  @@schema("tenant")
}

model FeeAssignment {
  id             String @id @default(uuid()) @db.Uuid
  feeStructureId String @db.Uuid
  studentId      String @db.Uuid

  // Amount details
  baseAmount     Decimal @db.Decimal(12, 2)
  discountAmount Decimal @default(0) @db.Decimal(12, 2)
  discountReason String?
  waivedAmount   Decimal @default(0) @db.Decimal(12, 2)
  additionalFees Decimal @default(0) @db.Decimal(12, 2)
  totalAmount    Decimal @db.Decimal(12, 2)

  // Payment tracking
  paidAmount      Decimal @default(0) @db.Decimal(12, 2)
  remainingAmount Decimal @db.Decimal(12, 2)

  // Interest & penalties
  interestAmount Decimal @default(0) @db.Decimal(12, 2)
  lateFeeAmount  Decimal @default(0) @db.Decimal(12, 2)

  // Installment details
  paymentType      PaymentType @default(FULL)
  installmentCount Int         @default(1)
  paidInstallments Int         @default(0)

  // Due dates
  dueDate      DateTime
  finalDueDate DateTime?

  // Status
  status FeeAssignmentStatus @default(PENDING)

  // Parent visibility
  visibleToParent Boolean @default(true)
  parentNotes     String?

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  feeStructure       FeeStructure        @relation(fields: [feeStructureId], references: [id])
  student            Student             @relation(fields: [studentId], references: [id])
  payments           Payment[]
  paymentReminders   PaymentReminder[]
  installmentDetails InstallmentDetail[]
  feeWaivers         FeeWaiver[]

  @@unique([feeStructureId, studentId])
  @@index([studentId])
  @@index([status])
  @@index([paymentType])
  @@index([dueDate])
  @@map("fee_assignments")
  @@schema("tenant")
}

model InstallmentDetail {
  id              String @id @default(uuid()) @db.Uuid
  feeAssignmentId String @db.Uuid

  // Installment info
  installmentNo  Int
  amount         Decimal @db.Decimal(12, 2)
  interestAmount Decimal @default(0) @db.Decimal(12, 2)

  // Payment tracking
  paidAmount    Decimal @default(0) @db.Decimal(12, 2)
  lateFeeAmount Decimal @default(0) @db.Decimal(12, 2)

  // Due date
  dueDate DateTime

  // Status
  status InstallmentStatus @default(PENDING)
  paidAt DateTime?

  // Reminders
  reminderSent   Boolean   @default(false)
  reminderSentAt DateTime?

  // Parent notes
  parentNotes String?

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  feeAssignment FeeAssignment @relation(fields: [feeAssignmentId], references: [id])
  payments      Payment[]

  @@unique([feeAssignmentId, installmentNo])
  @@index([status])
  @@index([dueDate])
  @@map("installment_details")
  @@schema("tenant")
}

model Payment {
  id                  String  @id @default(uuid()) @db.Uuid
  feeAssignmentId     String  @db.Uuid
  installmentDetailId String? @db.Uuid
  studentId           String  @db.Uuid

  // Payment amounts
  amount          Decimal @db.Decimal(12, 2)
  principalAmount Decimal @db.Decimal(12, 2)
  interestAmount  Decimal @default(0) @db.Decimal(12, 2)
  lateFeeAmount   Decimal @default(0) @db.Decimal(12, 2)

  // Payment method
  paymentMethod  PaymentMethod
  paymentGateway String?
  paymentChannel String? // online, offline, mobile_app

  // Transaction details
  transactionId   String  @unique
  referenceNumber String?

  // Bank details (for transfers)
  bankName      String?
  accountNumber String? // Masked
  accountName   String?

  // Status
  status PaymentStatus @default(PENDING)
  paidAt DateTime?

  // Processing
  processedBy String?   @db.Uuid
  processedAt DateTime?

  // Payer info
  paidBy     String? @db.Uuid // Parent user ID
  payerName  String?
  payerEmail String?
  payerPhone String?

  // Receipt
  receiptNumber    String?   @unique
  receiptUrl       String?
  receiptGenerated Boolean   @default(false)
  receiptSentAt    DateTime?

  // Notifications
  parentNotified   Boolean   @default(false)
  parentNotifiedAt DateTime?
  parentViewedAt   DateTime?

  // Failure handling
  failureReason String?
  failureCode   String?

  // Currency
  currency     String   @default("IDR")
  exchangeRate Decimal? @db.Decimal(10, 6)

  // Gateway response
  gatewayResponse Json?

  // Reconciliation
  reconciledAt DateTime?
  reconciledBy String?   @db.Uuid

  // Notes
  notes String?

  // Metadata
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  feeAssignment     FeeAssignment      @relation(fields: [feeAssignmentId], references: [id])
  student           Student            @relation(fields: [studentId], references: [id])
  installmentDetail InstallmentDetail? @relation(fields: [installmentDetailId], references: [id])
  refunds           PaymentRefund[]

  @@index([studentId])
  @@index([status])
  @@index([paymentMethod])
  @@index([paidAt])
  @@index([paidBy])
  @@index([paymentChannel])
  @@index([receiptNumber])
  @@index([transactionId])
  @@map("payments")
  @@schema("tenant")
}
